# gazelle:ignore

load("@bazel_gomock//:gomock.bzl", "gomock")
load("@io_bazel_rules_go//go:def.bzl", "go_library")

gomock(
    name = "aliases",
    out = "aliases.go",
    interfaces = [
        "ReadCloser",
        "Writer",
    ],
    library = "//internal/mock/aliases:go_default_library",
    package = "mock",
)

gomock(
    name = "blobstore",
    out = "blobstore.go",
    interfaces = ["BlobAccess"],
    library = "//pkg/blobstore:go_default_library",
    package = "mock",
)

gomock(
    name = "blobstore_local",
    out = "blobstore_local.go",
    interfaces = [
        "Block",
        "BlockAllocator",
        "DigestLocationMap",
        "LocationRecordArray",
    ],
    library = "//pkg/blobstore/local:go_default_library",
    package = "mock",
)

gomock(
    name = "buffer",
    out = "buffer.go",
    interfaces = [
        "ChunkReader",
        "ErrorHandler",
        "RepairFunc",
    ],
    library = "//pkg/blobstore/buffer:go_default_library",
    package = "mock",
)

gomock(
    name = "builder",
    out = "builder.go",
    interfaces = [
        "BuildQueue",
        "BuildQueueGetter",
    ],
    library = "//pkg/builder:go_default_library",
    package = "mock",
)

gomock(
    name = "cas",
    out = "cas.go",
    interfaces = ["ContentAddressableStorage"],
    library = "//pkg/cas:go_default_library",
    package = "mock",
)

gomock(
    name = "clock",
    out = "clock.go",
    interfaces = [
        "Clock",
        "Timer",
    ],
    library = "//pkg/clock:go_default_library",
    package = "mock",
)

gomock(
    name = "filesystem",
    out = "filesystem.go",
    interfaces = [
        "Directory",
        "FileReader",
        "FileReadWriter",
    ],
    library = "//pkg/filesystem:go_default_library",
    package = "mock",
)

gomock(
    name = "grpc",
    out = "grpc.go",
    interfaces = ["Authenticator"],
    library = "//pkg/grpc:go_default_library",
    package = "mock",
)

gomock(
    name = "grpc_go",
    out = "grpc_go.go",
    interfaces = [
        "ClientStream",
        "Streamer",
        "UnaryInvoker",
    ],
    library = "@org_golang_google_grpc//:go_default_library",
    package = "mock",
)

gomock(
    name = "mirrored",
    out = "mirrored.go",
    interfaces = ["BlobReplicator"],
    library = "//pkg/blobstore/mirrored:go_default_library",
    package = "mock",
)

gomock(
    name = "redis",
    out = "redis.go",
    interfaces = ["RedisClient"],
    library = "//pkg/blobstore:go_default_library",
    package = "mock",
)

gomock(
    name = "remoteexecution",
    out = "remoteexecution.go",
    interfaces = [
        "Execution_ExecuteServer",
        "Execution_WaitExecutionServer",
    ],
    library = "@com_github_bazelbuild_remote_apis//build/bazel/remote/execution/v2:go_default_library",
    package = "mock",
)

go_library(
    name = "go_default_library",
    srcs = [
        ":aliases.go",
        ":blobstore.go",
        ":blobstore_local.go",
        ":buffer.go",
        ":builder.go",
        ":cas.go",
        ":clock.go",
        ":filesystem.go",
        ":grpc.go",
        ":grpc_go.go",
        ":mirrored.go",
        ":redis.go",
        ":remoteexecution.go",
    ],
    importpath = "github.com/buildbarn/bb-storage/internal/mock",
    visibility = ["//:__subpackages__"],
    deps = [
        "//pkg/blobstore/buffer:go_default_library",
        "//pkg/blobstore/local:go_default_library",
        "//pkg/builder:go_default_library",
        "//pkg/clock:go_default_library",
        "//pkg/digest:go_default_library",
        "//pkg/filesystem:go_default_library",
        "//pkg/proto/cas:go_default_library",
        "@com_github_bazelbuild_remote_apis//build/bazel/remote/execution/v2:go_default_library",
        "@com_github_go_redis_redis//:go_default_library",
        "@com_github_golang_mock//gomock:go_default_library",
        "@go_googleapis//google/longrunning:longrunning_go_proto",
        "@org_golang_google_grpc//:go_default_library",
        "@org_golang_google_grpc//metadata:go_default_library",
        "@org_golang_x_sys//unix:go_default_library",
    ],
)
