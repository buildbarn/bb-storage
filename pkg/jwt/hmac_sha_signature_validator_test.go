package jwt_test

import (
	"testing"

	"github.com/buildbarn/bb-storage/pkg/jwt"
	"github.com/stretchr/testify/require"
)

func TestHMACSHASignatureValidator(t *testing.T) {
	signatureValidator := jwt.NewHMACSHASignatureValidator([]byte("lorem ipsum dolor sit amet"))

	// Algorithm "RS256" uses RSA; not HMAC. Validation should fail.
	require.False(t, signatureValidator.ValidateSignature(
		"RS256",
		"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0",
		[]byte{
			0x34, 0x75, 0x5a, 0x61, 0xed, 0xba, 0x31, 0xbb, 0x4e,
			0x62, 0x14, 0x8a, 0x92, 0x82, 0x98, 0x74, 0x55, 0x68,
			0x9a, 0x0e, 0x22, 0xf1, 0x92, 0x5d, 0xf3, 0xff, 0x91,
			0x53, 0xc5, 0x4d, 0x6d, 0xfb, 0x5c, 0xe1, 0x34, 0x8c,
			0x6f, 0x86, 0xd7, 0x3f, 0x79, 0x77, 0x62, 0x53, 0x56,
			0x00, 0x2c, 0x32, 0x5c, 0xf1, 0x9f, 0x7f, 0x3e, 0x5a,
			0x5c, 0x77, 0x3a, 0x96, 0xdc, 0xb5, 0x63, 0x6b, 0x78,
			0x49, 0x64, 0x6a, 0x1a, 0xd7, 0xab, 0x6a, 0x0b, 0x15,
			0x75, 0x9b, 0x9f, 0x0e, 0x7e, 0x41, 0x96, 0x72, 0x65,
			0xf6, 0x97, 0x51, 0xfe, 0x47, 0x55, 0x15, 0x4b, 0x2b,
			0x6b, 0x6a, 0xd6, 0x28, 0x4a, 0x1f, 0x91, 0x97, 0x88,
			0x0b, 0x8c, 0x96, 0xca, 0xd1, 0x39, 0xf2, 0xc3, 0x08,
			0x8a, 0x1b, 0xe8, 0xf4, 0x7d, 0x52, 0x72, 0x69, 0x95,
			0xc0, 0x17, 0x10, 0x3f, 0xa5, 0xc4, 0x4e, 0xa6, 0x1d,
			0xd1, 0xa4, 0x87, 0xa7, 0x58, 0x0e, 0x6b, 0xd4, 0x5d,
			0x50, 0xf0, 0xef, 0xa1, 0x74, 0x39, 0xa2, 0xac, 0xa0,
			0x4e, 0xa5, 0x6d, 0xc5, 0xa0, 0xeb, 0xeb, 0x05, 0x05,
			0x2a, 0xb2, 0x88, 0xb6, 0x00, 0x4c, 0xcd, 0x62, 0x1d,
			0x35, 0x9e, 0xb2, 0xec, 0xef, 0x44, 0xd0, 0x38, 0x44,
			0x3d, 0x36, 0xc4, 0xf6, 0xb7, 0xc1, 0xa3, 0xa2, 0x93,
			0x16, 0xc1, 0xc0, 0x66, 0x73, 0x20, 0xe2, 0x4e, 0xbc,
			0x08, 0x3a, 0x76, 0xc2, 0x86, 0x08, 0x69, 0x76, 0xe6,
			0x61, 0x35, 0x9c, 0xbd, 0xbc, 0xc8, 0xb8, 0x73, 0xbb,
			0xff, 0x7e, 0xc6, 0x4f, 0xbf, 0x57, 0x74, 0x8c, 0x24,
			0x9b, 0xde, 0x50, 0x27, 0xb8, 0x58, 0x0b, 0xd4, 0x62,
			0xc2, 0xb5, 0x7b, 0x99, 0xeb, 0x1b, 0x63, 0x83, 0xc0,
			0x6a, 0x11, 0x11, 0x25, 0xac, 0x27, 0xb6, 0x1a, 0x34,
			0x9b, 0x2f, 0x78, 0xd9, 0x78, 0x5e, 0x54, 0xb9, 0x86,
			0xc0, 0xb3, 0x01, 0x91,
		}))

	// HMAC with SHA-256, both with a valid and invalid signature.
	require.True(t, signatureValidator.ValidateSignature(
		"HS256",
		"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ",
		[]byte{
			0xb3, 0x57, 0x72, 0xdf, 0xc5, 0xc6, 0x74, 0xba,
			0x79, 0xcc, 0xb6, 0x04, 0x07, 0x65, 0x0e, 0xb7,
			0xd6, 0x65, 0x06, 0x1a, 0x09, 0xed, 0x97, 0xeb,
			0x35, 0x80, 0x06, 0x26, 0xdc, 0x19, 0xec, 0x61,
		}))
	require.False(t, signatureValidator.ValidateSignature(
		"HS256",
		"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ",
		[]byte{
			0x6d, 0x32, 0xc8, 0x2c, 0x25, 0xce, 0x4d, 0x54,
			0x4e, 0xd1, 0x1d, 0x80, 0x0a, 0x12, 0x42, 0x03,
			0x7e, 0xbd, 0xdb, 0xc6, 0x2a, 0x09, 0xb2, 0x65,
			0x12, 0x6f, 0xcd, 0x1b, 0xc2, 0xeb, 0xad, 0x88,
		}))

	// HMAC with SHA-384, both with a valid and invalid signature.
	require.True(t, signatureValidator.ValidateSignature(
		"HS384",
		"eyJhbGciOiJIUzM4NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0",
		[]byte{
			0x17, 0xf9, 0x9c, 0xc4, 0x9c, 0x91, 0xdf, 0x4e,
			0x1e, 0x86, 0x93, 0x1d, 0x28, 0x50, 0x57, 0x92,
			0x23, 0x2d, 0x8a, 0x1f, 0x1d, 0x04, 0x5d, 0x64,
			0x86, 0x01, 0x48, 0x3c, 0x33, 0x8a, 0xf3, 0xb1,
			0x41, 0x09, 0x67, 0x66, 0xb3, 0x39, 0x51, 0xf7,
			0xb7, 0x08, 0x4d, 0x21, 0x8f, 0x46, 0x65, 0xa9,
		}))
	require.False(t, signatureValidator.ValidateSignature(
		"HS384",
		"eyJhbGciOiJIUzM4NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0",
		[]byte{
			0xd9, 0xa6, 0x0a, 0x8f, 0x74, 0xc6, 0xe9, 0x94,
			0xa5, 0xa1, 0xdb, 0xca, 0xe8, 0xca, 0xa6, 0xf8,
			0xa4, 0x53, 0x1f, 0x34, 0xd3, 0xc3, 0xbe, 0x41,
			0x53, 0x07, 0xef, 0x9b, 0xcd, 0xa1, 0xcf, 0x0d,
			0x0b, 0x3f, 0xed, 0x08, 0xce, 0x49, 0x92, 0x25,
			0xff, 0xbf, 0xfa, 0xc1, 0x5f, 0xea, 0xd6, 0x07,
		}))

	// HMAC with SHA-512, both with a valid and invalid signature.
	require.True(t, signatureValidator.ValidateSignature(
		"HS512",
		"eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0",
		[]byte{
			0xa7, 0xaa, 0x8f, 0x98, 0x7a, 0xed, 0xfa, 0x02,
			0x5a, 0x31, 0xb0, 0x6c, 0xb5, 0xf4, 0x74, 0x3c,
			0x4e, 0x60, 0x39, 0x17, 0xee, 0xab, 0xea, 0x06,
			0x79, 0x07, 0xb9, 0x33, 0xa3, 0x18, 0xb8, 0xfc,
			0x55, 0x31, 0xae, 0xb9, 0xf9, 0xc5, 0xb2, 0xac,
			0x12, 0xab, 0x86, 0x64, 0x48, 0x7b, 0xfd, 0x6e,
			0xe4, 0x98, 0x37, 0x36, 0x5d, 0xe8, 0xf6, 0x49,
			0x8f, 0xf9, 0x9f, 0x97, 0xf4, 0x19, 0x96, 0xff,
		}))
	require.False(t, signatureValidator.ValidateSignature(
		"HS512",
		"eyJhbGciOiJIUzM4NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0",
		[]byte{
			0x9b, 0x19, 0x35, 0xa6, 0xb3, 0xe0, 0x9c, 0x3a,
			0xe0, 0x47, 0x4c, 0xff, 0x63, 0xe6, 0x78, 0x0d,
			0x83, 0x56, 0x69, 0x50, 0x51, 0x74, 0x43, 0xc6,
			0x6d, 0x43, 0x07, 0x60, 0x44, 0xce, 0xe5, 0xf2,
			0x5a, 0xf9, 0x5c, 0x8b, 0x99, 0x7d, 0x84, 0xb5,
			0xb6, 0x3a, 0x22, 0x82, 0x8d, 0xf9, 0x5b, 0x3b,
			0x2d, 0x3a, 0x97, 0x9f, 0x20, 0x84, 0xcc, 0x57,
			0x17, 0x72, 0x47, 0xe2, 0xa1, 0x6d, 0x62, 0x9f,
		}))
}
