package util_test

import (
	"os"
	"path/filepath"
	"testing"

	"github.com/buildbarn/bb-storage/pkg/testutil"
	"github.com/buildbarn/bb-storage/pkg/util"
	"github.com/stretchr/testify/require"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

const (
	// Example keypair generated by running:
	// openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:4096 -keyout key -out crt
	otherExampleCertificate = `
-----BEGIN CERTIFICATE-----
MIIEwjCCAqoCCQCZYu6WrhMDJTANBgkqhkiG9w0BAQsFADAjMQswCQYDVQQGEwJV
UzEUMBIGA1UEAwwLZXhhbXBsZS5jb20wHhcNMjIxMDI4MTU1ODI3WhcNMjMxMDI4
MTU1ODI3WjAjMQswCQYDVQQGEwJVUzEUMBIGA1UEAwwLZXhhbXBsZS5jb20wggIi
MA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCvwCmSRy0YKRAOIn+vI3zZOrAP
JCyQo7k56lm+aqhXnZE/ocXAofFFTP1B7P1WCbJA2FqkbLm5FLAzsRB+LwW2cRQP
KBykc58XqDF6vV1c8UiTT0w5t0ATlj+swAPgGeu2Cp0jKEM1U0XEX6iQZNCeHXiY
Vc9JBANzPAXIzKktUi9GlLzDn5SfSIWDa1AF4lA5GakcAje/ew63+IaDI+/B12ir
0LHMtAy2w644ciSOhM2cwR38H0xhxza1Z6sEy9lsd5fGFQb7EQSsgAyAMA8IQZ96
TKlJspUp4J1/93dYNX6kpydVoFySmDAgiPJNA4fJVppZtXMHBnmv63zjjG9HWK7R
KlfF/Smi44ZvGb8E/88a7rMHuXJxiQoXYJV4XmagPpLVb29rquJOzaAXwT/EQYDz
i0GVsbetY5YNpoerhdwvQBYTxdbrTaumIT+axaj2JGQXglVdLIGYSxQnB8UUpjqN
i8TaX7pjiPHoUPKXamDFEpGZvkABsf/2cSxWtC3TEeXI5IudfAZe/EvWbpdQHIrC
S7tp0Pwi7zzRM14eTkrAG8b6OQWWi8qX/7lTn6iofUi4pPslxpEYm6y89ySPD+w/
IBAl0tN1AFqLWFpV+mWtG7UdBG2XVsKtPK/WyVzwPJncnrtOf6TICTPC0MwflUKA
QiL+BV66dLnbyixzkwIDAQABMA0GCSqGSIb3DQEBCwUAA4ICAQBXwQMO5HGSOIdk
H9ZCWVin1o0o6FrXEl/I7xiA/vY8rqngbSNvMzhuz/XdAyumf0+gRZLHRb7OoihH
KaBsGTwzV9o1dpkHvkN8RLA+klYO5RDzyxu8on92fa8EHp5OmXy6lVRgac6su02P
lFjTg5zg4udEDUd+B90fbdU0GA8CV9jBLHisuIq8etxLSCYmhkAaYyYMH9jYzq5P
A1rYN5cyerH3hlepGvYGRmHom+GIR7R98RsOIvpcDBiFIo+SWqvy5GinE8t63VHo
YSF83BrBX/SZ7yVutbVwUGkRmoPr5wqb6LxzGuCcsEqg5dhRaQ5iCuUed3J1bcgb
3yNwBaenpRDgL7FYzH2p+fwE0KjXhbqzaV9i3+mO2fDUScM/F6SlCn8bV85iKE/P
4JOVVwWeogIpn7ubbwkso3LqXLYekWav9Lon4gssb4b7YDbGvrg5GO7//+4ULn4q
9wfX5YhfRhrZKFo3DI1vYfxxwf+GsxMknZ+hJNGmutF+iRHQDDc54Yx178wqBhAp
n1rN4c5wbzzwkM0YKW/nUM4/eA4EcBP/ZbyYas246g5rTSE5ChlWkcrA68hgN4WR
fY57PwMOGjzTHrTmwdUIEIsH6pZJ7ugQ/S1qyLzAp4lqQSfA/CbzVwg2RJkl1PmL
H1Auo4iCB5V6yhCtyXbIzIXX83umYQ==
-----END CERTIFICATE-----
`
	otherExamplePrivateKey = `
-----BEGIN PRIVATE KEY-----
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
TkDFGxcTllG2AWETb4bXLfJePwDGxdI=
-----END PRIVATE KEY-----
`
)

func TestTLSCertificate(t *testing.T) {
	tempDir := t.TempDir()
	exampleCertFile := filepath.Join(tempDir, "example-cert.pem")
	exampleKeyFile := filepath.Join(tempDir, "example-key.pem")

	t.Run("LoadCertificate", func(t *testing.T) {
		os.WriteFile(exampleCertFile, []byte(exampleCertificate), os.FileMode(0o600))
		os.WriteFile(exampleKeyFile, []byte(examplePrivateKey), os.FileMode(0o600))

		cert := util.NewRotatingTLSCertificate(exampleCertFile, exampleKeyFile)

		err := cert.LoadCertificate()
		require.NoError(t, err)

		tlsCert := cert.GetCertificate()
		require.Len(t, tlsCert.Certificate, 1)
		// Second Get of certificate should b the same value
		require.Equal(t, cert.GetCertificate(), tlsCert)
	})

	t.Run("ReloadSameCertificate", func(t *testing.T) {
		os.WriteFile(exampleCertFile, []byte(exampleCertificate), os.FileMode(0o600))
		os.WriteFile(exampleKeyFile, []byte(examplePrivateKey), os.FileMode(0o600))

		cert := util.NewRotatingTLSCertificate(exampleCertFile, exampleKeyFile)

		err := cert.LoadCertificate()
		require.NoError(t, err)

		tlsCert := cert.GetCertificate()
		require.Len(t, tlsCert.Certificate, 1)

		err = cert.LoadCertificate()
		require.NoError(t, err)
		// Reloaded certificates should be the same value
		require.Equal(t, cert.GetCertificate(), tlsCert)
	})

	t.Run("ReloadSameCertificateAfterTouch", func(t *testing.T) {
		os.WriteFile(exampleCertFile, []byte(exampleCertificate), os.FileMode(0o600))
		os.WriteFile(exampleKeyFile, []byte(examplePrivateKey), os.FileMode(0o600))

		cert := util.NewRotatingTLSCertificate(exampleCertFile, exampleKeyFile)

		err := cert.LoadCertificate()
		require.NoError(t, err)

		tlsCert := cert.GetCertificate()
		require.Len(t, tlsCert.Certificate, 1)

		os.WriteFile(exampleCertFile, []byte(exampleCertificate), os.FileMode(0o600))
		os.WriteFile(exampleKeyFile, []byte(examplePrivateKey), os.FileMode(0o600))

		err = cert.LoadCertificate()
		require.NoError(t, err)
		// Reloaded certificates should be the same value
		require.Equal(t, cert.GetCertificate(), tlsCert)
	})

	t.Run("LoadChangedCertificate", func(t *testing.T) {
		os.WriteFile(exampleCertFile, []byte(exampleCertificate), os.FileMode(0o600))
		os.WriteFile(exampleKeyFile, []byte(examplePrivateKey), os.FileMode(0o600))

		cert := util.NewRotatingTLSCertificate(exampleCertFile, exampleKeyFile)

		err := cert.LoadCertificate()
		require.NoError(t, err)

		tlsCert := cert.GetCertificate()
		require.Len(t, tlsCert.Certificate, 1)

		os.WriteFile(exampleCertFile, []byte(otherExampleCertificate), os.FileMode(0o600))
		os.WriteFile(exampleKeyFile, []byte(otherExamplePrivateKey), os.FileMode(0o600))

		err = cert.LoadCertificate()
		require.NoError(t, err)
		// Certificates should be changed and not the same value
		require.NotEqual(t, cert.GetCertificate(), tlsCert)
	})

	t.Run("MismatchingCertificatePair", func(t *testing.T) {
		os.WriteFile(exampleCertFile, []byte(exampleCertFile), os.FileMode(0o600))
		os.WriteFile(exampleKeyFile, []byte(otherExamplePrivateKey), os.FileMode(0o600))

		cert := util.NewRotatingTLSCertificate(exampleCertFile, exampleKeyFile)

		err := cert.LoadCertificate()
		testutil.RequireEqualStatus(t, status.Error(codes.Unknown, "Invalid certificate file or private key file: tls: failed to find any PEM data in certificate input"), err)
	})

	t.Run("InvalidCertificate", func(t *testing.T) {
		os.WriteFile(exampleCertFile, []byte("This is an invalid certificate"), os.FileMode(0o600))
		os.WriteFile(exampleKeyFile, []byte(examplePrivateKey), os.FileMode(0o600))

		cert := util.NewRotatingTLSCertificate(exampleCertFile, exampleKeyFile)

		err := cert.LoadCertificate()
		testutil.RequireEqualStatus(t, status.Error(codes.Unknown, "Invalid certificate file or private key file: tls: failed to find any PEM data in certificate input"), err)
	})
}
