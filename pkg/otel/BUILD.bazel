load("@aspect_bazel_lib//lib:transitions.bzl", "platform_transition_filegroup")
load("@aspect_rules_js//js:defs.bzl", "js_run_binary")
load("@com_github_buildbarn_bb_storage_npm//:purgecss/package_json.bzl", purgecss_bin = "bin")
load("@rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "otel",
    srcs = [
        "active_spans_reporting_http_handler.go",
        "grpc_otlp_trace_client.go",
        "key_value.go",
        "maximum_rate_sampler.go",
        "w3c_trace_context.go",
    ],
    # keep
    embedsrcs = [
        "active_spans.html",
        ":stylesheet",
    ],
    importpath = "github.com/buildbarn/bb-storage/pkg/otel",
    visibility = ["//visibility:public"],
    deps = [
        "//pkg/clock",
        "@io_opentelemetry_go_otel//attribute",
        "@io_opentelemetry_go_otel//codes",
        "@io_opentelemetry_go_otel//propagation",
        "@io_opentelemetry_go_otel_exporters_otlp_otlptrace//:otlptrace",
        "@io_opentelemetry_go_otel_sdk//trace",
        "@io_opentelemetry_go_otel_trace//:trace",
        "@io_opentelemetry_go_otel_trace//embedded",
        "@io_opentelemetry_go_proto_otlp//collector/trace/v1:trace",
        "@io_opentelemetry_go_proto_otlp//common/v1:common",
        "@io_opentelemetry_go_proto_otlp//trace/v1:trace",
        "@org_golang_google_grpc//:grpc",
        "@org_golang_google_grpc//codes",
        "@org_golang_google_grpc//status",
    ],
)

go_test(
    name = "otel_test",
    srcs = [
        "active_spans_reporting_http_handler_test.go",
        "key_value_test.go",
        "maximum_rate_sampler_test.go",
        "w3c_trace_context_test.go",
    ],
    # keep
    embedsrcs = [":stylesheet"],
    deps = [
        ":otel",
        "//internal/mock",
        "//pkg/testutil",
        "@com_github_stretchr_testify//require",
        "@io_opentelemetry_go_otel//attribute",
        "@io_opentelemetry_go_otel//codes",
        "@io_opentelemetry_go_otel_sdk//trace",
        "@io_opentelemetry_go_otel_trace//:trace",
        "@io_opentelemetry_go_proto_otlp//common/v1:common",
        "@org_golang_google_grpc//codes",
        "@org_golang_google_grpc//status",
        "@org_uber_go_mock//gomock",
    ],
)

purgecss_bin.purgecss_binary(
    name = "purgecss",
    tags = ["manual"],
)

# Create a copy of Bootstrap that only contains the style attributes
# used by the HTML template.
js_run_binary(
    name = "stylesheet_platform",
    srcs = [
        "active_spans.html",
        "@com_github_twbs_bootstrap//:css/bootstrap.min.css",
    ],
    outs = ["stylesheet.css"],
    args = [
        # js_run_binary runs in the output dir;
        # see https://github.com/aspect-build/rules_js/blob/main/docs/migrate.md#account-for-change-to-working-directory
        "--css",
        "../../../$(location @com_github_twbs_bootstrap//:css/bootstrap.min.css)",
        "--content",
        "../../../$(location active_spans.html)",
        "--output",
        "../../../$(location stylesheet.css)",
    ],
    copy_srcs_to_bin = False,
    tags = ["manual"],
    tool = ":purgecss",
)

# Work around https://github.com/aspect-build/rules_js/issues/2121 by always
# building the stylesheet for the host platform, even if we are cross
# compiling.
platform_transition_filegroup(
    name = "stylesheet",
    srcs = [":stylesheet_platform"],
    target_platform = "@platforms//host",
)
