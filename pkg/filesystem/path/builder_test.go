package path_test

import (
	"testing"

	"github.com/buildbarn/bb-storage/internal/mock"
	"github.com/buildbarn/bb-storage/pkg/filesystem/path"
	"github.com/golang/mock/gomock"
	"github.com/stretchr/testify/require"
)

func TestBuilder(t *testing.T) {
	ctrl := gomock.NewController(t)

	// The following paths should remain completely identical when
	// resolved without making any assumptions about the layout of
	// the underlying file system. ".." elements should not be
	// removed from paths.
	t.Run("Identity", func(t *testing.T) {
		for _, p := range []string{
			".",
			"..",
			"/",
			"hello",
			"hello/",
			"hello/..",
			"/hello/",
			"/hello/..",
			"/hello/../world",
			"/hello/../world/",
			"/hello/../world/foo",
		} {
			t.Run(p, func(t *testing.T) {
				builder, scopeWalker := path.EmptyBuilder.Join(path.VoidScopeWalker)
				require.NoError(t, path.Resolve(path.MustNewUNIXParser(p), scopeWalker))
				require.Equal(t, p, builder.String())
			})
		}
	})

	// The following paths can be normalized, even when making no
	// assumptions about the layout of the underlying file system.
	t.Run("Normalized", func(t *testing.T) {
		for from, to := range map[string]string{
			"":            ".",
			"./":          ".",
			"./.":         ".",
			"../":         "..",
			"../.":        "..",
			"//":          "/",
			"/.":          "/",
			"/./":         "/",
			"/..":         "/",
			"/../":        "/",
			"/hello/.":    "/hello/",
			"/hello/../.": "/hello/..",
		} {
			t.Run(from, func(t *testing.T) {
				builder, scopeWalker := path.EmptyBuilder.Join(path.VoidScopeWalker)
				require.NoError(t, path.Resolve(path.MustNewUNIXParser(from), scopeWalker))
				require.Equal(t, to, builder.String())
			})
		}
	})

	// Paths generated by joining with RootBuilder should start the
	// resolution process at the root directory.
	t.Run("Root", func(t *testing.T) {
		for from, to := range map[string]string{
			"":         "/",
			"hello":    "/hello",
			"/hello":   "/hello",
			"..":       "/",
			"../hello": "/hello",
		} {
			t.Run(from, func(t *testing.T) {
				builder, scopeWalker := path.RootBuilder.Join(path.VoidScopeWalker)
				require.NoError(t, path.Resolve(path.MustNewUNIXParser(from), scopeWalker))
				require.Equal(t, to, builder.String())
			})
		}
	})

	// When OnDirectory() returns a GotDirectory response with
	// IsReversible == true, we're permitted to remove the component
	// entirely when successive OnUp() calls are performed. This
	// means that in the case of "hello/..", the resulting path may
	// be ".".
	t.Run("Reversible1", func(t *testing.T) {
		scopeWalker := mock.NewMockScopeWalker(ctrl)
		componentWalker1 := mock.NewMockComponentWalker(ctrl)
		scopeWalker.EXPECT().OnRelative().Return(componentWalker1, nil)
		componentWalker2 := mock.NewMockComponentWalker(ctrl)
		componentWalker1.EXPECT().OnDirectory(path.MustNewComponent("hello")).
			Return(path.GotDirectory{Child: componentWalker2, IsReversible: true}, nil)
		componentWalker3 := mock.NewMockComponentWalker(ctrl)
		componentWalker2.EXPECT().OnUp().Return(componentWalker3, nil)

		builder, s := path.EmptyBuilder.Join(scopeWalker)
		require.NoError(t, path.Resolve(path.MustNewUNIXParser("hello/.."), s))
		require.Equal(t, ".", builder.String())
	})

	// The same as before, "../hello/.." may evaluate to ".." in
	// case the "hello" directory is reversible.
	t.Run("Reversible2", func(t *testing.T) {
		scopeWalker := mock.NewMockScopeWalker(ctrl)
		componentWalker1 := mock.NewMockComponentWalker(ctrl)
		scopeWalker.EXPECT().OnRelative().Return(componentWalker1, nil)
		componentWalker2 := mock.NewMockComponentWalker(ctrl)
		componentWalker1.EXPECT().OnUp().Return(componentWalker2, nil)
		componentWalker3 := mock.NewMockComponentWalker(ctrl)
		componentWalker2.EXPECT().OnDirectory(path.MustNewComponent("hello")).
			Return(path.GotDirectory{Child: componentWalker3, IsReversible: true}, nil)
		componentWalker4 := mock.NewMockComponentWalker(ctrl)
		componentWalker3.EXPECT().OnUp().Return(componentWalker4, nil)

		builder, s := path.EmptyBuilder.Join(scopeWalker)
		require.NoError(t, path.Resolve(path.MustNewUNIXParser("../hello/.."), s))
		require.Equal(t, "..", builder.String())
	})

	// In case "/hello/world/.." is evaluated and "world" is
	// reversible, the result may be simplified to "/hello/". We
	// should leave the trailing slash in place, as "/hello" may be
	// a symbolic link.
	t.Run("Reversible3", func(t *testing.T) {
		scopeWalker := mock.NewMockScopeWalker(ctrl)
		componentWalker1 := mock.NewMockComponentWalker(ctrl)
		scopeWalker.EXPECT().OnAbsolute().Return(componentWalker1, nil)
		componentWalker2 := mock.NewMockComponentWalker(ctrl)
		componentWalker1.EXPECT().OnDirectory(path.MustNewComponent("hello")).
			Return(path.GotDirectory{Child: componentWalker2, IsReversible: false}, nil)
		componentWalker3 := mock.NewMockComponentWalker(ctrl)
		componentWalker2.EXPECT().OnDirectory(path.MustNewComponent("world")).
			Return(path.GotDirectory{Child: componentWalker3, IsReversible: true}, nil)
		componentWalker4 := mock.NewMockComponentWalker(ctrl)
		componentWalker3.EXPECT().OnUp().Return(componentWalker4, nil)

		builder, s := path.EmptyBuilder.Join(scopeWalker)
		require.NoError(t, path.Resolve(path.MustNewUNIXParser("/hello/world/.."), s))
		require.Equal(t, "/hello/", builder.String())
	})
}
