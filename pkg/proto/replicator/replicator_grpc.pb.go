// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.1
// source: pkg/proto/replicator/replicator.proto

package replicator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Replicator_ReplicateBlobs_FullMethodName = "/buildbarn.replicator.Replicator/ReplicateBlobs"
)

// ReplicatorClient is the client API for Replicator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplicatorClient interface {
	ReplicateBlobs(ctx context.Context, in *ReplicateBlobsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type replicatorClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicatorClient(cc grpc.ClientConnInterface) ReplicatorClient {
	return &replicatorClient{cc}
}

func (c *replicatorClient) ReplicateBlobs(ctx context.Context, in *ReplicateBlobsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Replicator_ReplicateBlobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicatorServer is the server API for Replicator service.
// All implementations should embed UnimplementedReplicatorServer
// for forward compatibility
type ReplicatorServer interface {
	ReplicateBlobs(context.Context, *ReplicateBlobsRequest) (*emptypb.Empty, error)
}

// UnimplementedReplicatorServer should be embedded to have forward compatible implementations.
type UnimplementedReplicatorServer struct {
}

func (UnimplementedReplicatorServer) ReplicateBlobs(context.Context, *ReplicateBlobsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicateBlobs not implemented")
}

// UnsafeReplicatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplicatorServer will
// result in compilation errors.
type UnsafeReplicatorServer interface {
	mustEmbedUnimplementedReplicatorServer()
}

func RegisterReplicatorServer(s grpc.ServiceRegistrar, srv ReplicatorServer) {
	s.RegisterService(&Replicator_ServiceDesc, srv)
}

func _Replicator_ReplicateBlobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicateBlobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).ReplicateBlobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Replicator_ReplicateBlobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).ReplicateBlobs(ctx, req.(*ReplicateBlobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Replicator_ServiceDesc is the grpc.ServiceDesc for Replicator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Replicator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "buildbarn.replicator.Replicator",
	HandlerType: (*ReplicatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReplicateBlobs",
			Handler:    _Replicator_ReplicateBlobs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/replicator/replicator.proto",
}
