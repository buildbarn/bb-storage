// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.1
// source: pkg/proto/configuration/blobstore/blobstore.proto

package blobstore

import (
	blockdevice "github.com/buildbarn/bb-storage/pkg/proto/configuration/blockdevice"
	aws "github.com/buildbarn/bb-storage/pkg/proto/configuration/cloud/aws"
	gcp "github.com/buildbarn/bb-storage/pkg/proto/configuration/cloud/gcp"
	digest "github.com/buildbarn/bb-storage/pkg/proto/configuration/digest"
	grpc "github.com/buildbarn/bb-storage/pkg/proto/configuration/grpc"
	http "github.com/buildbarn/bb-storage/pkg/proto/configuration/http"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BlobstoreConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentAddressableStorage *BlobAccessConfiguration `protobuf:"bytes,1,opt,name=content_addressable_storage,json=contentAddressableStorage,proto3" json:"content_addressable_storage,omitempty"`
	ActionCache               *BlobAccessConfiguration `protobuf:"bytes,2,opt,name=action_cache,json=actionCache,proto3" json:"action_cache,omitempty"`
}

func (x *BlobstoreConfiguration) Reset() {
	*x = BlobstoreConfiguration{}
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlobstoreConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobstoreConfiguration) ProtoMessage() {}

func (x *BlobstoreConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobstoreConfiguration.ProtoReflect.Descriptor instead.
func (*BlobstoreConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescGZIP(), []int{0}
}

func (x *BlobstoreConfiguration) GetContentAddressableStorage() *BlobAccessConfiguration {
	if x != nil {
		return x.ContentAddressableStorage
	}
	return nil
}

func (x *BlobstoreConfiguration) GetActionCache() *BlobAccessConfiguration {
	if x != nil {
		return x.ActionCache
	}
	return nil
}

type BlobAccessConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Backend:
	//
	//	*BlobAccessConfiguration_ReadCaching
	//	*BlobAccessConfiguration_Grpc
	//	*BlobAccessConfiguration_Error
	//	*BlobAccessConfiguration_Sharding
	//	*BlobAccessConfiguration_Mirrored
	//	*BlobAccessConfiguration_Local
	//	*BlobAccessConfiguration_ExistenceCaching
	//	*BlobAccessConfiguration_CompletenessChecking
	//	*BlobAccessConfiguration_ReadFallback
	//	*BlobAccessConfiguration_ReferenceExpanding
	//	*BlobAccessConfiguration_Demultiplexing
	//	*BlobAccessConfiguration_HierarchicalInstanceNames
	//	*BlobAccessConfiguration_ActionResultExpiring
	//	*BlobAccessConfiguration_ReadCanarying
	//	*BlobAccessConfiguration_ZipReading
	//	*BlobAccessConfiguration_ZipWriting
	//	*BlobAccessConfiguration_WithLabels
	//	*BlobAccessConfiguration_Label
	Backend isBlobAccessConfiguration_Backend `protobuf_oneof:"backend"`
}

func (x *BlobAccessConfiguration) Reset() {
	*x = BlobAccessConfiguration{}
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlobAccessConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobAccessConfiguration) ProtoMessage() {}

func (x *BlobAccessConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobAccessConfiguration.ProtoReflect.Descriptor instead.
func (*BlobAccessConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescGZIP(), []int{1}
}

func (m *BlobAccessConfiguration) GetBackend() isBlobAccessConfiguration_Backend {
	if m != nil {
		return m.Backend
	}
	return nil
}

func (x *BlobAccessConfiguration) GetReadCaching() *ReadCachingBlobAccessConfiguration {
	if x, ok := x.GetBackend().(*BlobAccessConfiguration_ReadCaching); ok {
		return x.ReadCaching
	}
	return nil
}

func (x *BlobAccessConfiguration) GetGrpc() *grpc.ClientConfiguration {
	if x, ok := x.GetBackend().(*BlobAccessConfiguration_Grpc); ok {
		return x.Grpc
	}
	return nil
}

func (x *BlobAccessConfiguration) GetError() *status.Status {
	if x, ok := x.GetBackend().(*BlobAccessConfiguration_Error); ok {
		return x.Error
	}
	return nil
}

func (x *BlobAccessConfiguration) GetSharding() *ShardingBlobAccessConfiguration {
	if x, ok := x.GetBackend().(*BlobAccessConfiguration_Sharding); ok {
		return x.Sharding
	}
	return nil
}

func (x *BlobAccessConfiguration) GetMirrored() *MirroredBlobAccessConfiguration {
	if x, ok := x.GetBackend().(*BlobAccessConfiguration_Mirrored); ok {
		return x.Mirrored
	}
	return nil
}

func (x *BlobAccessConfiguration) GetLocal() *LocalBlobAccessConfiguration {
	if x, ok := x.GetBackend().(*BlobAccessConfiguration_Local); ok {
		return x.Local
	}
	return nil
}

func (x *BlobAccessConfiguration) GetExistenceCaching() *ExistenceCachingBlobAccessConfiguration {
	if x, ok := x.GetBackend().(*BlobAccessConfiguration_ExistenceCaching); ok {
		return x.ExistenceCaching
	}
	return nil
}

func (x *BlobAccessConfiguration) GetCompletenessChecking() *CompletenessCheckingBlobAccessConfiguration {
	if x, ok := x.GetBackend().(*BlobAccessConfiguration_CompletenessChecking); ok {
		return x.CompletenessChecking
	}
	return nil
}

func (x *BlobAccessConfiguration) GetReadFallback() *ReadFallbackBlobAccessConfiguration {
	if x, ok := x.GetBackend().(*BlobAccessConfiguration_ReadFallback); ok {
		return x.ReadFallback
	}
	return nil
}

func (x *BlobAccessConfiguration) GetReferenceExpanding() *ReferenceExpandingBlobAccessConfiguration {
	if x, ok := x.GetBackend().(*BlobAccessConfiguration_ReferenceExpanding); ok {
		return x.ReferenceExpanding
	}
	return nil
}

func (x *BlobAccessConfiguration) GetDemultiplexing() *DemultiplexingBlobAccessConfiguration {
	if x, ok := x.GetBackend().(*BlobAccessConfiguration_Demultiplexing); ok {
		return x.Demultiplexing
	}
	return nil
}

func (x *BlobAccessConfiguration) GetHierarchicalInstanceNames() *BlobAccessConfiguration {
	if x, ok := x.GetBackend().(*BlobAccessConfiguration_HierarchicalInstanceNames); ok {
		return x.HierarchicalInstanceNames
	}
	return nil
}

func (x *BlobAccessConfiguration) GetActionResultExpiring() *ActionResultExpiringBlobAccessConfiguration {
	if x, ok := x.GetBackend().(*BlobAccessConfiguration_ActionResultExpiring); ok {
		return x.ActionResultExpiring
	}
	return nil
}

func (x *BlobAccessConfiguration) GetReadCanarying() *ReadCanaryingBlobAccessConfiguration {
	if x, ok := x.GetBackend().(*BlobAccessConfiguration_ReadCanarying); ok {
		return x.ReadCanarying
	}
	return nil
}

func (x *BlobAccessConfiguration) GetZipReading() *ZIPBlobAccessConfiguration {
	if x, ok := x.GetBackend().(*BlobAccessConfiguration_ZipReading); ok {
		return x.ZipReading
	}
	return nil
}

func (x *BlobAccessConfiguration) GetZipWriting() *ZIPBlobAccessConfiguration {
	if x, ok := x.GetBackend().(*BlobAccessConfiguration_ZipWriting); ok {
		return x.ZipWriting
	}
	return nil
}

func (x *BlobAccessConfiguration) GetWithLabels() *WithLabelsBlobAccessConfiguration {
	if x, ok := x.GetBackend().(*BlobAccessConfiguration_WithLabels); ok {
		return x.WithLabels
	}
	return nil
}

func (x *BlobAccessConfiguration) GetLabel() string {
	if x, ok := x.GetBackend().(*BlobAccessConfiguration_Label); ok {
		return x.Label
	}
	return ""
}

type isBlobAccessConfiguration_Backend interface {
	isBlobAccessConfiguration_Backend()
}

type BlobAccessConfiguration_ReadCaching struct {
	ReadCaching *ReadCachingBlobAccessConfiguration `protobuf:"bytes,4,opt,name=read_caching,json=readCaching,proto3,oneof"`
}

type BlobAccessConfiguration_Grpc struct {
	Grpc *grpc.ClientConfiguration `protobuf:"bytes,7,opt,name=grpc,proto3,oneof"`
}

type BlobAccessConfiguration_Error struct {
	Error *status.Status `protobuf:"bytes,8,opt,name=error,proto3,oneof"`
}

type BlobAccessConfiguration_Sharding struct {
	Sharding *ShardingBlobAccessConfiguration `protobuf:"bytes,9,opt,name=sharding,proto3,oneof"`
}

type BlobAccessConfiguration_Mirrored struct {
	Mirrored *MirroredBlobAccessConfiguration `protobuf:"bytes,14,opt,name=mirrored,proto3,oneof"`
}

type BlobAccessConfiguration_Local struct {
	Local *LocalBlobAccessConfiguration `protobuf:"bytes,15,opt,name=local,proto3,oneof"`
}

type BlobAccessConfiguration_ExistenceCaching struct {
	ExistenceCaching *ExistenceCachingBlobAccessConfiguration `protobuf:"bytes,16,opt,name=existence_caching,json=existenceCaching,proto3,oneof"`
}

type BlobAccessConfiguration_CompletenessChecking struct {
	CompletenessChecking *CompletenessCheckingBlobAccessConfiguration `protobuf:"bytes,17,opt,name=completeness_checking,json=completenessChecking,proto3,oneof"`
}

type BlobAccessConfiguration_ReadFallback struct {
	ReadFallback *ReadFallbackBlobAccessConfiguration `protobuf:"bytes,18,opt,name=read_fallback,json=readFallback,proto3,oneof"`
}

type BlobAccessConfiguration_ReferenceExpanding struct {
	ReferenceExpanding *ReferenceExpandingBlobAccessConfiguration `protobuf:"bytes,19,opt,name=reference_expanding,json=referenceExpanding,proto3,oneof"`
}

type BlobAccessConfiguration_Demultiplexing struct {
	Demultiplexing *DemultiplexingBlobAccessConfiguration `protobuf:"bytes,20,opt,name=demultiplexing,proto3,oneof"`
}

type BlobAccessConfiguration_HierarchicalInstanceNames struct {
	HierarchicalInstanceNames *BlobAccessConfiguration `protobuf:"bytes,21,opt,name=hierarchical_instance_names,json=hierarchicalInstanceNames,proto3,oneof"`
}

type BlobAccessConfiguration_ActionResultExpiring struct {
	ActionResultExpiring *ActionResultExpiringBlobAccessConfiguration `protobuf:"bytes,22,opt,name=action_result_expiring,json=actionResultExpiring,proto3,oneof"`
}

type BlobAccessConfiguration_ReadCanarying struct {
	ReadCanarying *ReadCanaryingBlobAccessConfiguration `protobuf:"bytes,23,opt,name=read_canarying,json=readCanarying,proto3,oneof"`
}

type BlobAccessConfiguration_ZipReading struct {
	ZipReading *ZIPBlobAccessConfiguration `protobuf:"bytes,24,opt,name=zip_reading,json=zipReading,proto3,oneof"`
}

type BlobAccessConfiguration_ZipWriting struct {
	ZipWriting *ZIPBlobAccessConfiguration `protobuf:"bytes,25,opt,name=zip_writing,json=zipWriting,proto3,oneof"`
}

type BlobAccessConfiguration_WithLabels struct {
	WithLabels *WithLabelsBlobAccessConfiguration `protobuf:"bytes,26,opt,name=with_labels,json=withLabels,proto3,oneof"`
}

type BlobAccessConfiguration_Label struct {
	Label string `protobuf:"bytes,27,opt,name=label,proto3,oneof"`
}

func (*BlobAccessConfiguration_ReadCaching) isBlobAccessConfiguration_Backend() {}

func (*BlobAccessConfiguration_Grpc) isBlobAccessConfiguration_Backend() {}

func (*BlobAccessConfiguration_Error) isBlobAccessConfiguration_Backend() {}

func (*BlobAccessConfiguration_Sharding) isBlobAccessConfiguration_Backend() {}

func (*BlobAccessConfiguration_Mirrored) isBlobAccessConfiguration_Backend() {}

func (*BlobAccessConfiguration_Local) isBlobAccessConfiguration_Backend() {}

func (*BlobAccessConfiguration_ExistenceCaching) isBlobAccessConfiguration_Backend() {}

func (*BlobAccessConfiguration_CompletenessChecking) isBlobAccessConfiguration_Backend() {}

func (*BlobAccessConfiguration_ReadFallback) isBlobAccessConfiguration_Backend() {}

func (*BlobAccessConfiguration_ReferenceExpanding) isBlobAccessConfiguration_Backend() {}

func (*BlobAccessConfiguration_Demultiplexing) isBlobAccessConfiguration_Backend() {}

func (*BlobAccessConfiguration_HierarchicalInstanceNames) isBlobAccessConfiguration_Backend() {}

func (*BlobAccessConfiguration_ActionResultExpiring) isBlobAccessConfiguration_Backend() {}

func (*BlobAccessConfiguration_ReadCanarying) isBlobAccessConfiguration_Backend() {}

func (*BlobAccessConfiguration_ZipReading) isBlobAccessConfiguration_Backend() {}

func (*BlobAccessConfiguration_ZipWriting) isBlobAccessConfiguration_Backend() {}

func (*BlobAccessConfiguration_WithLabels) isBlobAccessConfiguration_Backend() {}

func (*BlobAccessConfiguration_Label) isBlobAccessConfiguration_Backend() {}

type ReadCachingBlobAccessConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slow       *BlobAccessConfiguration     `protobuf:"bytes,1,opt,name=slow,proto3" json:"slow,omitempty"`
	Fast       *BlobAccessConfiguration     `protobuf:"bytes,2,opt,name=fast,proto3" json:"fast,omitempty"`
	Replicator *BlobReplicatorConfiguration `protobuf:"bytes,3,opt,name=replicator,proto3" json:"replicator,omitempty"`
}

func (x *ReadCachingBlobAccessConfiguration) Reset() {
	*x = ReadCachingBlobAccessConfiguration{}
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadCachingBlobAccessConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCachingBlobAccessConfiguration) ProtoMessage() {}

func (x *ReadCachingBlobAccessConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCachingBlobAccessConfiguration.ProtoReflect.Descriptor instead.
func (*ReadCachingBlobAccessConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescGZIP(), []int{2}
}

func (x *ReadCachingBlobAccessConfiguration) GetSlow() *BlobAccessConfiguration {
	if x != nil {
		return x.Slow
	}
	return nil
}

func (x *ReadCachingBlobAccessConfiguration) GetFast() *BlobAccessConfiguration {
	if x != nil {
		return x.Fast
	}
	return nil
}

func (x *ReadCachingBlobAccessConfiguration) GetReplicator() *BlobReplicatorConfiguration {
	if x != nil {
		return x.Replicator
	}
	return nil
}

type ShardingBlobAccessConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashInitialization uint64                                   `protobuf:"varint,1,opt,name=hash_initialization,json=hashInitialization,proto3" json:"hash_initialization,omitempty"`
	Shards             []*ShardingBlobAccessConfiguration_Shard `protobuf:"bytes,2,rep,name=shards,proto3" json:"shards,omitempty"`
}

func (x *ShardingBlobAccessConfiguration) Reset() {
	*x = ShardingBlobAccessConfiguration{}
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardingBlobAccessConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardingBlobAccessConfiguration) ProtoMessage() {}

func (x *ShardingBlobAccessConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardingBlobAccessConfiguration.ProtoReflect.Descriptor instead.
func (*ShardingBlobAccessConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescGZIP(), []int{3}
}

func (x *ShardingBlobAccessConfiguration) GetHashInitialization() uint64 {
	if x != nil {
		return x.HashInitialization
	}
	return 0
}

func (x *ShardingBlobAccessConfiguration) GetShards() []*ShardingBlobAccessConfiguration_Shard {
	if x != nil {
		return x.Shards
	}
	return nil
}

type MirroredBlobAccessConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackendA       *BlobAccessConfiguration     `protobuf:"bytes,1,opt,name=backend_a,json=backendA,proto3" json:"backend_a,omitempty"`
	BackendB       *BlobAccessConfiguration     `protobuf:"bytes,2,opt,name=backend_b,json=backendB,proto3" json:"backend_b,omitempty"`
	ReplicatorAToB *BlobReplicatorConfiguration `protobuf:"bytes,3,opt,name=replicator_a_to_b,json=replicatorAToB,proto3" json:"replicator_a_to_b,omitempty"`
	ReplicatorBToA *BlobReplicatorConfiguration `protobuf:"bytes,4,opt,name=replicator_b_to_a,json=replicatorBToA,proto3" json:"replicator_b_to_a,omitempty"`
}

func (x *MirroredBlobAccessConfiguration) Reset() {
	*x = MirroredBlobAccessConfiguration{}
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MirroredBlobAccessConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirroredBlobAccessConfiguration) ProtoMessage() {}

func (x *MirroredBlobAccessConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirroredBlobAccessConfiguration.ProtoReflect.Descriptor instead.
func (*MirroredBlobAccessConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescGZIP(), []int{4}
}

func (x *MirroredBlobAccessConfiguration) GetBackendA() *BlobAccessConfiguration {
	if x != nil {
		return x.BackendA
	}
	return nil
}

func (x *MirroredBlobAccessConfiguration) GetBackendB() *BlobAccessConfiguration {
	if x != nil {
		return x.BackendB
	}
	return nil
}

func (x *MirroredBlobAccessConfiguration) GetReplicatorAToB() *BlobReplicatorConfiguration {
	if x != nil {
		return x.ReplicatorAToB
	}
	return nil
}

func (x *MirroredBlobAccessConfiguration) GetReplicatorBToA() *BlobReplicatorConfiguration {
	if x != nil {
		return x.ReplicatorBToA
	}
	return nil
}

type LocalBlobAccessConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to KeyLocationMapBackend:
	//
	//	*LocalBlobAccessConfiguration_KeyLocationMapInMemory_
	//	*LocalBlobAccessConfiguration_KeyLocationMapOnBlockDevice
	KeyLocationMapBackend            isLocalBlobAccessConfiguration_KeyLocationMapBackend `protobuf_oneof:"key_location_map_backend"`
	KeyLocationMapMaximumGetAttempts uint32                                               `protobuf:"varint,2,opt,name=key_location_map_maximum_get_attempts,json=keyLocationMapMaximumGetAttempts,proto3" json:"key_location_map_maximum_get_attempts,omitempty"`
	KeyLocationMapMaximumPutAttempts int64                                                `protobuf:"varint,3,opt,name=key_location_map_maximum_put_attempts,json=keyLocationMapMaximumPutAttempts,proto3" json:"key_location_map_maximum_put_attempts,omitempty"`
	OldBlocks                        int32                                                `protobuf:"varint,5,opt,name=old_blocks,json=oldBlocks,proto3" json:"old_blocks,omitempty"`
	CurrentBlocks                    int32                                                `protobuf:"varint,6,opt,name=current_blocks,json=currentBlocks,proto3" json:"current_blocks,omitempty"`
	NewBlocks                        int32                                                `protobuf:"varint,7,opt,name=new_blocks,json=newBlocks,proto3" json:"new_blocks,omitempty"`
	// Types that are assignable to BlocksBackend:
	//
	//	*LocalBlobAccessConfiguration_BlocksInMemory_
	//	*LocalBlobAccessConfiguration_BlocksOnBlockDevice_
	BlocksBackend             isLocalBlobAccessConfiguration_BlocksBackend `protobuf_oneof:"blocks_backend"`
	Persistent                *LocalBlobAccessConfiguration_Persistent     `protobuf:"bytes,13,opt,name=persistent,proto3" json:"persistent,omitempty"`
	HierarchicalInstanceNames bool                                         `protobuf:"varint,14,opt,name=hierarchical_instance_names,json=hierarchicalInstanceNames,proto3" json:"hierarchical_instance_names,omitempty"`
}

func (x *LocalBlobAccessConfiguration) Reset() {
	*x = LocalBlobAccessConfiguration{}
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalBlobAccessConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalBlobAccessConfiguration) ProtoMessage() {}

func (x *LocalBlobAccessConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalBlobAccessConfiguration.ProtoReflect.Descriptor instead.
func (*LocalBlobAccessConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescGZIP(), []int{5}
}

func (m *LocalBlobAccessConfiguration) GetKeyLocationMapBackend() isLocalBlobAccessConfiguration_KeyLocationMapBackend {
	if m != nil {
		return m.KeyLocationMapBackend
	}
	return nil
}

func (x *LocalBlobAccessConfiguration) GetKeyLocationMapInMemory() *LocalBlobAccessConfiguration_KeyLocationMapInMemory {
	if x, ok := x.GetKeyLocationMapBackend().(*LocalBlobAccessConfiguration_KeyLocationMapInMemory_); ok {
		return x.KeyLocationMapInMemory
	}
	return nil
}

func (x *LocalBlobAccessConfiguration) GetKeyLocationMapOnBlockDevice() *blockdevice.Configuration {
	if x, ok := x.GetKeyLocationMapBackend().(*LocalBlobAccessConfiguration_KeyLocationMapOnBlockDevice); ok {
		return x.KeyLocationMapOnBlockDevice
	}
	return nil
}

func (x *LocalBlobAccessConfiguration) GetKeyLocationMapMaximumGetAttempts() uint32 {
	if x != nil {
		return x.KeyLocationMapMaximumGetAttempts
	}
	return 0
}

func (x *LocalBlobAccessConfiguration) GetKeyLocationMapMaximumPutAttempts() int64 {
	if x != nil {
		return x.KeyLocationMapMaximumPutAttempts
	}
	return 0
}

func (x *LocalBlobAccessConfiguration) GetOldBlocks() int32 {
	if x != nil {
		return x.OldBlocks
	}
	return 0
}

func (x *LocalBlobAccessConfiguration) GetCurrentBlocks() int32 {
	if x != nil {
		return x.CurrentBlocks
	}
	return 0
}

func (x *LocalBlobAccessConfiguration) GetNewBlocks() int32 {
	if x != nil {
		return x.NewBlocks
	}
	return 0
}

func (m *LocalBlobAccessConfiguration) GetBlocksBackend() isLocalBlobAccessConfiguration_BlocksBackend {
	if m != nil {
		return m.BlocksBackend
	}
	return nil
}

func (x *LocalBlobAccessConfiguration) GetBlocksInMemory() *LocalBlobAccessConfiguration_BlocksInMemory {
	if x, ok := x.GetBlocksBackend().(*LocalBlobAccessConfiguration_BlocksInMemory_); ok {
		return x.BlocksInMemory
	}
	return nil
}

func (x *LocalBlobAccessConfiguration) GetBlocksOnBlockDevice() *LocalBlobAccessConfiguration_BlocksOnBlockDevice {
	if x, ok := x.GetBlocksBackend().(*LocalBlobAccessConfiguration_BlocksOnBlockDevice_); ok {
		return x.BlocksOnBlockDevice
	}
	return nil
}

func (x *LocalBlobAccessConfiguration) GetPersistent() *LocalBlobAccessConfiguration_Persistent {
	if x != nil {
		return x.Persistent
	}
	return nil
}

func (x *LocalBlobAccessConfiguration) GetHierarchicalInstanceNames() bool {
	if x != nil {
		return x.HierarchicalInstanceNames
	}
	return false
}

type isLocalBlobAccessConfiguration_KeyLocationMapBackend interface {
	isLocalBlobAccessConfiguration_KeyLocationMapBackend()
}

type LocalBlobAccessConfiguration_KeyLocationMapInMemory_ struct {
	KeyLocationMapInMemory *LocalBlobAccessConfiguration_KeyLocationMapInMemory `protobuf:"bytes,11,opt,name=key_location_map_in_memory,json=keyLocationMapInMemory,proto3,oneof"`
}

type LocalBlobAccessConfiguration_KeyLocationMapOnBlockDevice struct {
	KeyLocationMapOnBlockDevice *blockdevice.Configuration `protobuf:"bytes,12,opt,name=key_location_map_on_block_device,json=keyLocationMapOnBlockDevice,proto3,oneof"`
}

func (*LocalBlobAccessConfiguration_KeyLocationMapInMemory_) isLocalBlobAccessConfiguration_KeyLocationMapBackend() {
}

func (*LocalBlobAccessConfiguration_KeyLocationMapOnBlockDevice) isLocalBlobAccessConfiguration_KeyLocationMapBackend() {
}

type isLocalBlobAccessConfiguration_BlocksBackend interface {
	isLocalBlobAccessConfiguration_BlocksBackend()
}

type LocalBlobAccessConfiguration_BlocksInMemory_ struct {
	BlocksInMemory *LocalBlobAccessConfiguration_BlocksInMemory `protobuf:"bytes,9,opt,name=blocks_in_memory,json=blocksInMemory,proto3,oneof"`
}

type LocalBlobAccessConfiguration_BlocksOnBlockDevice_ struct {
	BlocksOnBlockDevice *LocalBlobAccessConfiguration_BlocksOnBlockDevice `protobuf:"bytes,10,opt,name=blocks_on_block_device,json=blocksOnBlockDevice,proto3,oneof"`
}

func (*LocalBlobAccessConfiguration_BlocksInMemory_) isLocalBlobAccessConfiguration_BlocksBackend() {}

func (*LocalBlobAccessConfiguration_BlocksOnBlockDevice_) isLocalBlobAccessConfiguration_BlocksBackend() {
}

type ExistenceCachingBlobAccessConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backend        *BlobAccessConfiguration            `protobuf:"bytes,1,opt,name=backend,proto3" json:"backend,omitempty"`
	ExistenceCache *digest.ExistenceCacheConfiguration `protobuf:"bytes,2,opt,name=existence_cache,json=existenceCache,proto3" json:"existence_cache,omitempty"`
}

func (x *ExistenceCachingBlobAccessConfiguration) Reset() {
	*x = ExistenceCachingBlobAccessConfiguration{}
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExistenceCachingBlobAccessConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistenceCachingBlobAccessConfiguration) ProtoMessage() {}

func (x *ExistenceCachingBlobAccessConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistenceCachingBlobAccessConfiguration.ProtoReflect.Descriptor instead.
func (*ExistenceCachingBlobAccessConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescGZIP(), []int{6}
}

func (x *ExistenceCachingBlobAccessConfiguration) GetBackend() *BlobAccessConfiguration {
	if x != nil {
		return x.Backend
	}
	return nil
}

func (x *ExistenceCachingBlobAccessConfiguration) GetExistenceCache() *digest.ExistenceCacheConfiguration {
	if x != nil {
		return x.ExistenceCache
	}
	return nil
}

type CompletenessCheckingBlobAccessConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backend                   *BlobAccessConfiguration `protobuf:"bytes,1,opt,name=backend,proto3" json:"backend,omitempty"`
	MaximumTotalTreeSizeBytes int64                    `protobuf:"varint,2,opt,name=maximum_total_tree_size_bytes,json=maximumTotalTreeSizeBytes,proto3" json:"maximum_total_tree_size_bytes,omitempty"`
}

func (x *CompletenessCheckingBlobAccessConfiguration) Reset() {
	*x = CompletenessCheckingBlobAccessConfiguration{}
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompletenessCheckingBlobAccessConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletenessCheckingBlobAccessConfiguration) ProtoMessage() {}

func (x *CompletenessCheckingBlobAccessConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletenessCheckingBlobAccessConfiguration.ProtoReflect.Descriptor instead.
func (*CompletenessCheckingBlobAccessConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescGZIP(), []int{7}
}

func (x *CompletenessCheckingBlobAccessConfiguration) GetBackend() *BlobAccessConfiguration {
	if x != nil {
		return x.Backend
	}
	return nil
}

func (x *CompletenessCheckingBlobAccessConfiguration) GetMaximumTotalTreeSizeBytes() int64 {
	if x != nil {
		return x.MaximumTotalTreeSizeBytes
	}
	return 0
}

type ReadFallbackBlobAccessConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Primary    *BlobAccessConfiguration     `protobuf:"bytes,1,opt,name=primary,proto3" json:"primary,omitempty"`
	Secondary  *BlobAccessConfiguration     `protobuf:"bytes,2,opt,name=secondary,proto3" json:"secondary,omitempty"`
	Replicator *BlobReplicatorConfiguration `protobuf:"bytes,3,opt,name=replicator,proto3" json:"replicator,omitempty"`
}

func (x *ReadFallbackBlobAccessConfiguration) Reset() {
	*x = ReadFallbackBlobAccessConfiguration{}
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadFallbackBlobAccessConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFallbackBlobAccessConfiguration) ProtoMessage() {}

func (x *ReadFallbackBlobAccessConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFallbackBlobAccessConfiguration.ProtoReflect.Descriptor instead.
func (*ReadFallbackBlobAccessConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescGZIP(), []int{8}
}

func (x *ReadFallbackBlobAccessConfiguration) GetPrimary() *BlobAccessConfiguration {
	if x != nil {
		return x.Primary
	}
	return nil
}

func (x *ReadFallbackBlobAccessConfiguration) GetSecondary() *BlobAccessConfiguration {
	if x != nil {
		return x.Secondary
	}
	return nil
}

func (x *ReadFallbackBlobAccessConfiguration) GetReplicator() *BlobReplicatorConfiguration {
	if x != nil {
		return x.Replicator
	}
	return nil
}

type ReferenceExpandingBlobAccessConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndirectContentAddressableStorage *BlobAccessConfiguration        `protobuf:"bytes,1,opt,name=indirect_content_addressable_storage,json=indirectContentAddressableStorage,proto3" json:"indirect_content_addressable_storage,omitempty"`
	AwsSession                        *aws.SessionConfiguration       `protobuf:"bytes,2,opt,name=aws_session,json=awsSession,proto3" json:"aws_session,omitempty"`
	HttpClient                        *http.ClientConfiguration       `protobuf:"bytes,3,opt,name=http_client,json=httpClient,proto3" json:"http_client,omitempty"`
	GcpClientOptions                  *gcp.ClientOptionsConfiguration `protobuf:"bytes,4,opt,name=gcp_client_options,json=gcpClientOptions,proto3" json:"gcp_client_options,omitempty"`
	ContentAddressableStorage         *BlobAccessConfiguration        `protobuf:"bytes,5,opt,name=content_addressable_storage,json=contentAddressableStorage,proto3" json:"content_addressable_storage,omitempty"`
}

func (x *ReferenceExpandingBlobAccessConfiguration) Reset() {
	*x = ReferenceExpandingBlobAccessConfiguration{}
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReferenceExpandingBlobAccessConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceExpandingBlobAccessConfiguration) ProtoMessage() {}

func (x *ReferenceExpandingBlobAccessConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceExpandingBlobAccessConfiguration.ProtoReflect.Descriptor instead.
func (*ReferenceExpandingBlobAccessConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescGZIP(), []int{9}
}

func (x *ReferenceExpandingBlobAccessConfiguration) GetIndirectContentAddressableStorage() *BlobAccessConfiguration {
	if x != nil {
		return x.IndirectContentAddressableStorage
	}
	return nil
}

func (x *ReferenceExpandingBlobAccessConfiguration) GetAwsSession() *aws.SessionConfiguration {
	if x != nil {
		return x.AwsSession
	}
	return nil
}

func (x *ReferenceExpandingBlobAccessConfiguration) GetHttpClient() *http.ClientConfiguration {
	if x != nil {
		return x.HttpClient
	}
	return nil
}

func (x *ReferenceExpandingBlobAccessConfiguration) GetGcpClientOptions() *gcp.ClientOptionsConfiguration {
	if x != nil {
		return x.GcpClientOptions
	}
	return nil
}

func (x *ReferenceExpandingBlobAccessConfiguration) GetContentAddressableStorage() *BlobAccessConfiguration {
	if x != nil {
		return x.ContentAddressableStorage
	}
	return nil
}

type BlobReplicatorConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Mode:
	//
	//	*BlobReplicatorConfiguration_Local
	//	*BlobReplicatorConfiguration_Remote
	//	*BlobReplicatorConfiguration_Queued
	//	*BlobReplicatorConfiguration_Noop
	//	*BlobReplicatorConfiguration_Deduplicating
	//	*BlobReplicatorConfiguration_ConcurrencyLimiting
	Mode isBlobReplicatorConfiguration_Mode `protobuf_oneof:"mode"`
}

func (x *BlobReplicatorConfiguration) Reset() {
	*x = BlobReplicatorConfiguration{}
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlobReplicatorConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobReplicatorConfiguration) ProtoMessage() {}

func (x *BlobReplicatorConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobReplicatorConfiguration.ProtoReflect.Descriptor instead.
func (*BlobReplicatorConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescGZIP(), []int{10}
}

func (m *BlobReplicatorConfiguration) GetMode() isBlobReplicatorConfiguration_Mode {
	if m != nil {
		return m.Mode
	}
	return nil
}

func (x *BlobReplicatorConfiguration) GetLocal() *emptypb.Empty {
	if x, ok := x.GetMode().(*BlobReplicatorConfiguration_Local); ok {
		return x.Local
	}
	return nil
}

func (x *BlobReplicatorConfiguration) GetRemote() *grpc.ClientConfiguration {
	if x, ok := x.GetMode().(*BlobReplicatorConfiguration_Remote); ok {
		return x.Remote
	}
	return nil
}

func (x *BlobReplicatorConfiguration) GetQueued() *QueuedBlobReplicatorConfiguration {
	if x, ok := x.GetMode().(*BlobReplicatorConfiguration_Queued); ok {
		return x.Queued
	}
	return nil
}

func (x *BlobReplicatorConfiguration) GetNoop() *emptypb.Empty {
	if x, ok := x.GetMode().(*BlobReplicatorConfiguration_Noop); ok {
		return x.Noop
	}
	return nil
}

func (x *BlobReplicatorConfiguration) GetDeduplicating() *BlobReplicatorConfiguration {
	if x, ok := x.GetMode().(*BlobReplicatorConfiguration_Deduplicating); ok {
		return x.Deduplicating
	}
	return nil
}

func (x *BlobReplicatorConfiguration) GetConcurrencyLimiting() *ConcurrencyLimitingBlobReplicatorConfiguration {
	if x, ok := x.GetMode().(*BlobReplicatorConfiguration_ConcurrencyLimiting); ok {
		return x.ConcurrencyLimiting
	}
	return nil
}

type isBlobReplicatorConfiguration_Mode interface {
	isBlobReplicatorConfiguration_Mode()
}

type BlobReplicatorConfiguration_Local struct {
	Local *emptypb.Empty `protobuf:"bytes,1,opt,name=local,proto3,oneof"`
}

type BlobReplicatorConfiguration_Remote struct {
	Remote *grpc.ClientConfiguration `protobuf:"bytes,2,opt,name=remote,proto3,oneof"`
}

type BlobReplicatorConfiguration_Queued struct {
	Queued *QueuedBlobReplicatorConfiguration `protobuf:"bytes,3,opt,name=queued,proto3,oneof"`
}

type BlobReplicatorConfiguration_Noop struct {
	Noop *emptypb.Empty `protobuf:"bytes,4,opt,name=noop,proto3,oneof"`
}

type BlobReplicatorConfiguration_Deduplicating struct {
	Deduplicating *BlobReplicatorConfiguration `protobuf:"bytes,5,opt,name=deduplicating,proto3,oneof"`
}

type BlobReplicatorConfiguration_ConcurrencyLimiting struct {
	ConcurrencyLimiting *ConcurrencyLimitingBlobReplicatorConfiguration `protobuf:"bytes,6,opt,name=concurrency_limiting,json=concurrencyLimiting,proto3,oneof"`
}

func (*BlobReplicatorConfiguration_Local) isBlobReplicatorConfiguration_Mode() {}

func (*BlobReplicatorConfiguration_Remote) isBlobReplicatorConfiguration_Mode() {}

func (*BlobReplicatorConfiguration_Queued) isBlobReplicatorConfiguration_Mode() {}

func (*BlobReplicatorConfiguration_Noop) isBlobReplicatorConfiguration_Mode() {}

func (*BlobReplicatorConfiguration_Deduplicating) isBlobReplicatorConfiguration_Mode() {}

func (*BlobReplicatorConfiguration_ConcurrencyLimiting) isBlobReplicatorConfiguration_Mode() {}

type QueuedBlobReplicatorConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base           *BlobReplicatorConfiguration        `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ExistenceCache *digest.ExistenceCacheConfiguration `protobuf:"bytes,2,opt,name=existence_cache,json=existenceCache,proto3" json:"existence_cache,omitempty"`
}

func (x *QueuedBlobReplicatorConfiguration) Reset() {
	*x = QueuedBlobReplicatorConfiguration{}
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueuedBlobReplicatorConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuedBlobReplicatorConfiguration) ProtoMessage() {}

func (x *QueuedBlobReplicatorConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuedBlobReplicatorConfiguration.ProtoReflect.Descriptor instead.
func (*QueuedBlobReplicatorConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescGZIP(), []int{11}
}

func (x *QueuedBlobReplicatorConfiguration) GetBase() *BlobReplicatorConfiguration {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *QueuedBlobReplicatorConfiguration) GetExistenceCache() *digest.ExistenceCacheConfiguration {
	if x != nil {
		return x.ExistenceCache
	}
	return nil
}

type ConcurrencyLimitingBlobReplicatorConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base               *BlobReplicatorConfiguration `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	MaximumConcurrency int64                        `protobuf:"varint,2,opt,name=maximum_concurrency,json=maximumConcurrency,proto3" json:"maximum_concurrency,omitempty"`
}

func (x *ConcurrencyLimitingBlobReplicatorConfiguration) Reset() {
	*x = ConcurrencyLimitingBlobReplicatorConfiguration{}
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConcurrencyLimitingBlobReplicatorConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcurrencyLimitingBlobReplicatorConfiguration) ProtoMessage() {}

func (x *ConcurrencyLimitingBlobReplicatorConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcurrencyLimitingBlobReplicatorConfiguration.ProtoReflect.Descriptor instead.
func (*ConcurrencyLimitingBlobReplicatorConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescGZIP(), []int{12}
}

func (x *ConcurrencyLimitingBlobReplicatorConfiguration) GetBase() *BlobReplicatorConfiguration {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ConcurrencyLimitingBlobReplicatorConfiguration) GetMaximumConcurrency() int64 {
	if x != nil {
		return x.MaximumConcurrency
	}
	return 0
}

type DemultiplexingBlobAccessConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceNamePrefixes map[string]*DemultiplexedBlobAccessConfiguration `protobuf:"bytes,1,rep,name=instance_name_prefixes,json=instanceNamePrefixes,proto3" json:"instance_name_prefixes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DemultiplexingBlobAccessConfiguration) Reset() {
	*x = DemultiplexingBlobAccessConfiguration{}
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DemultiplexingBlobAccessConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemultiplexingBlobAccessConfiguration) ProtoMessage() {}

func (x *DemultiplexingBlobAccessConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemultiplexingBlobAccessConfiguration.ProtoReflect.Descriptor instead.
func (*DemultiplexingBlobAccessConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescGZIP(), []int{13}
}

func (x *DemultiplexingBlobAccessConfiguration) GetInstanceNamePrefixes() map[string]*DemultiplexedBlobAccessConfiguration {
	if x != nil {
		return x.InstanceNamePrefixes
	}
	return nil
}

type DemultiplexedBlobAccessConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backend               *BlobAccessConfiguration `protobuf:"bytes,1,opt,name=backend,proto3" json:"backend,omitempty"`
	AddInstanceNamePrefix string                   `protobuf:"bytes,2,opt,name=add_instance_name_prefix,json=addInstanceNamePrefix,proto3" json:"add_instance_name_prefix,omitempty"`
}

func (x *DemultiplexedBlobAccessConfiguration) Reset() {
	*x = DemultiplexedBlobAccessConfiguration{}
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DemultiplexedBlobAccessConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemultiplexedBlobAccessConfiguration) ProtoMessage() {}

func (x *DemultiplexedBlobAccessConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemultiplexedBlobAccessConfiguration.ProtoReflect.Descriptor instead.
func (*DemultiplexedBlobAccessConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescGZIP(), []int{14}
}

func (x *DemultiplexedBlobAccessConfiguration) GetBackend() *BlobAccessConfiguration {
	if x != nil {
		return x.Backend
	}
	return nil
}

func (x *DemultiplexedBlobAccessConfiguration) GetAddInstanceNamePrefix() string {
	if x != nil {
		return x.AddInstanceNamePrefix
	}
	return ""
}

type ActionResultExpiringBlobAccessConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backend               *BlobAccessConfiguration `protobuf:"bytes,1,opt,name=backend,proto3" json:"backend,omitempty"`
	MinimumValidity       *durationpb.Duration     `protobuf:"bytes,2,opt,name=minimum_validity,json=minimumValidity,proto3" json:"minimum_validity,omitempty"`
	MaximumValidityJitter *durationpb.Duration     `protobuf:"bytes,3,opt,name=maximum_validity_jitter,json=maximumValidityJitter,proto3" json:"maximum_validity_jitter,omitempty"`
	MinimumTimestamp      *timestamppb.Timestamp   `protobuf:"bytes,4,opt,name=minimum_timestamp,json=minimumTimestamp,proto3" json:"minimum_timestamp,omitempty"`
}

func (x *ActionResultExpiringBlobAccessConfiguration) Reset() {
	*x = ActionResultExpiringBlobAccessConfiguration{}
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionResultExpiringBlobAccessConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionResultExpiringBlobAccessConfiguration) ProtoMessage() {}

func (x *ActionResultExpiringBlobAccessConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionResultExpiringBlobAccessConfiguration.ProtoReflect.Descriptor instead.
func (*ActionResultExpiringBlobAccessConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescGZIP(), []int{15}
}

func (x *ActionResultExpiringBlobAccessConfiguration) GetBackend() *BlobAccessConfiguration {
	if x != nil {
		return x.Backend
	}
	return nil
}

func (x *ActionResultExpiringBlobAccessConfiguration) GetMinimumValidity() *durationpb.Duration {
	if x != nil {
		return x.MinimumValidity
	}
	return nil
}

func (x *ActionResultExpiringBlobAccessConfiguration) GetMaximumValidityJitter() *durationpb.Duration {
	if x != nil {
		return x.MaximumValidityJitter
	}
	return nil
}

func (x *ActionResultExpiringBlobAccessConfiguration) GetMinimumTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.MinimumTimestamp
	}
	return nil
}

type ReadCanaryingBlobAccessConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source               *BlobAccessConfiguration `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Replica              *BlobAccessConfiguration `protobuf:"bytes,2,opt,name=replica,proto3" json:"replica,omitempty"`
	MaximumCacheSize     int32                    `protobuf:"varint,3,opt,name=maximum_cache_size,json=maximumCacheSize,proto3" json:"maximum_cache_size,omitempty"`
	MaximumCacheDuration *durationpb.Duration     `protobuf:"bytes,4,opt,name=maximum_cache_duration,json=maximumCacheDuration,proto3" json:"maximum_cache_duration,omitempty"`
}

func (x *ReadCanaryingBlobAccessConfiguration) Reset() {
	*x = ReadCanaryingBlobAccessConfiguration{}
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadCanaryingBlobAccessConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCanaryingBlobAccessConfiguration) ProtoMessage() {}

func (x *ReadCanaryingBlobAccessConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCanaryingBlobAccessConfiguration.ProtoReflect.Descriptor instead.
func (*ReadCanaryingBlobAccessConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescGZIP(), []int{16}
}

func (x *ReadCanaryingBlobAccessConfiguration) GetSource() *BlobAccessConfiguration {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ReadCanaryingBlobAccessConfiguration) GetReplica() *BlobAccessConfiguration {
	if x != nil {
		return x.Replica
	}
	return nil
}

func (x *ReadCanaryingBlobAccessConfiguration) GetMaximumCacheSize() int32 {
	if x != nil {
		return x.MaximumCacheSize
	}
	return 0
}

func (x *ReadCanaryingBlobAccessConfiguration) GetMaximumCacheDuration() *durationpb.Duration {
	if x != nil {
		return x.MaximumCacheDuration
	}
	return nil
}

type ZIPBlobAccessConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path                         string                              `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	DataIntegrityValidationCache *digest.ExistenceCacheConfiguration `protobuf:"bytes,2,opt,name=data_integrity_validation_cache,json=dataIntegrityValidationCache,proto3" json:"data_integrity_validation_cache,omitempty"`
}

func (x *ZIPBlobAccessConfiguration) Reset() {
	*x = ZIPBlobAccessConfiguration{}
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ZIPBlobAccessConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZIPBlobAccessConfiguration) ProtoMessage() {}

func (x *ZIPBlobAccessConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZIPBlobAccessConfiguration.ProtoReflect.Descriptor instead.
func (*ZIPBlobAccessConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescGZIP(), []int{17}
}

func (x *ZIPBlobAccessConfiguration) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ZIPBlobAccessConfiguration) GetDataIntegrityValidationCache() *digest.ExistenceCacheConfiguration {
	if x != nil {
		return x.DataIntegrityValidationCache
	}
	return nil
}

type WithLabelsBlobAccessConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backend *BlobAccessConfiguration            `protobuf:"bytes,1,opt,name=backend,proto3" json:"backend,omitempty"`
	Labels  map[string]*BlobAccessConfiguration `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WithLabelsBlobAccessConfiguration) Reset() {
	*x = WithLabelsBlobAccessConfiguration{}
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithLabelsBlobAccessConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithLabelsBlobAccessConfiguration) ProtoMessage() {}

func (x *WithLabelsBlobAccessConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithLabelsBlobAccessConfiguration.ProtoReflect.Descriptor instead.
func (*WithLabelsBlobAccessConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescGZIP(), []int{18}
}

func (x *WithLabelsBlobAccessConfiguration) GetBackend() *BlobAccessConfiguration {
	if x != nil {
		return x.Backend
	}
	return nil
}

func (x *WithLabelsBlobAccessConfiguration) GetLabels() map[string]*BlobAccessConfiguration {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ShardingBlobAccessConfiguration_Shard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backend *BlobAccessConfiguration `protobuf:"bytes,1,opt,name=backend,proto3" json:"backend,omitempty"`
	Weight  uint32                   `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *ShardingBlobAccessConfiguration_Shard) Reset() {
	*x = ShardingBlobAccessConfiguration_Shard{}
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardingBlobAccessConfiguration_Shard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardingBlobAccessConfiguration_Shard) ProtoMessage() {}

func (x *ShardingBlobAccessConfiguration_Shard) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardingBlobAccessConfiguration_Shard.ProtoReflect.Descriptor instead.
func (*ShardingBlobAccessConfiguration_Shard) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ShardingBlobAccessConfiguration_Shard) GetBackend() *BlobAccessConfiguration {
	if x != nil {
		return x.Backend
	}
	return nil
}

func (x *ShardingBlobAccessConfiguration_Shard) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type LocalBlobAccessConfiguration_KeyLocationMapInMemory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries int64 `protobuf:"varint,1,opt,name=entries,proto3" json:"entries,omitempty"`
}

func (x *LocalBlobAccessConfiguration_KeyLocationMapInMemory) Reset() {
	*x = LocalBlobAccessConfiguration_KeyLocationMapInMemory{}
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalBlobAccessConfiguration_KeyLocationMapInMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalBlobAccessConfiguration_KeyLocationMapInMemory) ProtoMessage() {}

func (x *LocalBlobAccessConfiguration_KeyLocationMapInMemory) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalBlobAccessConfiguration_KeyLocationMapInMemory.ProtoReflect.Descriptor instead.
func (*LocalBlobAccessConfiguration_KeyLocationMapInMemory) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescGZIP(), []int{5, 0}
}

func (x *LocalBlobAccessConfiguration_KeyLocationMapInMemory) GetEntries() int64 {
	if x != nil {
		return x.Entries
	}
	return 0
}

type LocalBlobAccessConfiguration_BlocksInMemory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockSizeBytes int64 `protobuf:"varint,1,opt,name=block_size_bytes,json=blockSizeBytes,proto3" json:"block_size_bytes,omitempty"`
}

func (x *LocalBlobAccessConfiguration_BlocksInMemory) Reset() {
	*x = LocalBlobAccessConfiguration_BlocksInMemory{}
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalBlobAccessConfiguration_BlocksInMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalBlobAccessConfiguration_BlocksInMemory) ProtoMessage() {}

func (x *LocalBlobAccessConfiguration_BlocksInMemory) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalBlobAccessConfiguration_BlocksInMemory.ProtoReflect.Descriptor instead.
func (*LocalBlobAccessConfiguration_BlocksInMemory) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescGZIP(), []int{5, 1}
}

func (x *LocalBlobAccessConfiguration_BlocksInMemory) GetBlockSizeBytes() int64 {
	if x != nil {
		return x.BlockSizeBytes
	}
	return 0
}

type LocalBlobAccessConfiguration_BlocksOnBlockDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source                       *blockdevice.Configuration          `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	SpareBlocks                  int32                               `protobuf:"varint,2,opt,name=spare_blocks,json=spareBlocks,proto3" json:"spare_blocks,omitempty"`
	DataIntegrityValidationCache *digest.ExistenceCacheConfiguration `protobuf:"bytes,3,opt,name=data_integrity_validation_cache,json=dataIntegrityValidationCache,proto3" json:"data_integrity_validation_cache,omitempty"`
}

func (x *LocalBlobAccessConfiguration_BlocksOnBlockDevice) Reset() {
	*x = LocalBlobAccessConfiguration_BlocksOnBlockDevice{}
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalBlobAccessConfiguration_BlocksOnBlockDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalBlobAccessConfiguration_BlocksOnBlockDevice) ProtoMessage() {}

func (x *LocalBlobAccessConfiguration_BlocksOnBlockDevice) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalBlobAccessConfiguration_BlocksOnBlockDevice.ProtoReflect.Descriptor instead.
func (*LocalBlobAccessConfiguration_BlocksOnBlockDevice) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescGZIP(), []int{5, 2}
}

func (x *LocalBlobAccessConfiguration_BlocksOnBlockDevice) GetSource() *blockdevice.Configuration {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *LocalBlobAccessConfiguration_BlocksOnBlockDevice) GetSpareBlocks() int32 {
	if x != nil {
		return x.SpareBlocks
	}
	return 0
}

func (x *LocalBlobAccessConfiguration_BlocksOnBlockDevice) GetDataIntegrityValidationCache() *digest.ExistenceCacheConfiguration {
	if x != nil {
		return x.DataIntegrityValidationCache
	}
	return nil
}

type LocalBlobAccessConfiguration_Persistent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateDirectoryPath   string               `protobuf:"bytes,1,opt,name=state_directory_path,json=stateDirectoryPath,proto3" json:"state_directory_path,omitempty"`
	MinimumEpochInterval *durationpb.Duration `protobuf:"bytes,2,opt,name=minimum_epoch_interval,json=minimumEpochInterval,proto3" json:"minimum_epoch_interval,omitempty"`
}

func (x *LocalBlobAccessConfiguration_Persistent) Reset() {
	*x = LocalBlobAccessConfiguration_Persistent{}
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalBlobAccessConfiguration_Persistent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalBlobAccessConfiguration_Persistent) ProtoMessage() {}

func (x *LocalBlobAccessConfiguration_Persistent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalBlobAccessConfiguration_Persistent.ProtoReflect.Descriptor instead.
func (*LocalBlobAccessConfiguration_Persistent) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescGZIP(), []int{5, 3}
}

func (x *LocalBlobAccessConfiguration_Persistent) GetStateDirectoryPath() string {
	if x != nil {
		return x.StateDirectoryPath
	}
	return ""
}

func (x *LocalBlobAccessConfiguration_Persistent) GetMinimumEpochInterval() *durationpb.Duration {
	if x != nil {
		return x.MinimumEpochInterval
	}
	return nil
}

var File_pkg_proto_configuration_blobstore_blobstore_proto protoreflect.FileDescriptor

var file_pkg_proto_configuration_blobstore_blobstore_proto_rawDesc = []byte{
	0x0a, 0x31, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x21, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f,
	0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72,
	0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x70,
	0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x61, 0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2b, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x67, 0x63, 0x70, 0x2f, 0x67, 0x63, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b,
	0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x2f, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70, 0x6b, 0x67,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x74,
	0x74, 0x70, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf3, 0x01,
	0x0a, 0x16, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42,
	0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x22, 0xe5, 0x0e, 0x0a, 0x17, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x6a, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72,
	0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b,
	0x72, 0x65, 0x61, 0x64, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x04, 0x67,
	0x72, 0x70, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04,
	0x67, 0x72, 0x70, 0x63, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x60, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f,
	0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x42,
	0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x60, 0x0a, 0x08, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62,
	0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x65,
	0x64, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c,
	0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6f,
	0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x79, 0x0a,
	0x11, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f,
	0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x85, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x12, 0x6d, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62,
	0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x7f, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x72, 0x0a, 0x0e, 0x64, 0x65, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x78, 0x69,
	0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x78, 0x69, 0x6e, 0x67, 0x12, 0x7c, 0x0a, 0x1b, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6c,
	0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x19, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x16, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c,
	0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x62,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x70, 0x0a, 0x0e, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x63, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c,
	0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x61, 0x6e, 0x61,
	0x72, 0x79, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d,
	0x72, 0x65, 0x61, 0x64, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x60, 0x0a,
	0x0b, 0x7a, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f,
	0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x5a, 0x49, 0x50, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0a, 0x7a, 0x69, 0x70, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x60, 0x0a, 0x0b, 0x7a, 0x69, 0x70, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62,
	0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x5a, 0x49, 0x50, 0x42, 0x6c, 0x6f, 0x62,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x7a, 0x69, 0x70, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x67, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61,
	0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a,
	0x77, 0x69, 0x74, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x4a, 0x04, 0x08,
	0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a,
	0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x22, 0xa4, 0x02, 0x0a, 0x22,
	0x52, 0x65, 0x61, 0x64, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x73, 0x6c,
	0x6f, 0x77, 0x12, 0x4e, 0x0a, 0x04, 0x66, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x66, 0x61,
	0x73, 0x74, 0x12, 0x5e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61,
	0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x22, 0xab, 0x02, 0x0a, 0x1f, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x42,
	0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x12, 0x68, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62,
	0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x75, 0x0a, 0x05, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x12, 0x54, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c,
	0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0xa9, 0x03, 0x0a, 0x1f, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6f,
	0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62,
	0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x41, 0x12, 0x57, 0x0a,
	0x09, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x42, 0x12, 0x69, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x54, 0x6f,
	0x42, 0x12, 0x69, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x62, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x54, 0x6f, 0x41, 0x22, 0xb6, 0x0c, 0x0a,
	0x1c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x94, 0x01,
	0x0a, 0x1a, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x61, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x56, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f,
	0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x62,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x16, 0x6b, 0x65,
	0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x7b, 0x0a, 0x20, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1b, 0x6b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x70, 0x4f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x4f, 0x0a, 0x25, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x20, 0x6b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70,
	0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x73, 0x12, 0x4f, 0x0a, 0x25, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70,
	0x75, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x20, 0x6b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x70, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x75, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x6c, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e,
	0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x7a, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f,
	0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x62,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x49, 0x6e, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x48, 0x01, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x49, 0x6e, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x8a, 0x01, 0x0a, 0x16, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f,
	0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72,
	0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42,
	0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x01, 0x52, 0x13, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x6a, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72,
	0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42,
	0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a,
	0x1b, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x19, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x32, 0x0a,
	0x16, 0x4b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x49,
	0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x1a, 0x3a, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x49, 0x6e, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x89, 0x02,
	0x0a, 0x13, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72,
	0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x70, 0x61, 0x72, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x1f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x2e,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x64, 0x61, 0x74,
	0x61, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x1a, 0x8f, 0x01, 0x0a, 0x0a, 0x50, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4f, 0x0a, 0x16, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x1a, 0x0a, 0x18, 0x6b,
	0x65, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a,
	0x04, 0x08, 0x08, 0x10, 0x09, 0x22, 0xe5, 0x01, 0x0a, 0x27, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x54, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f,
	0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x64, 0x0a, 0x0f, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x22, 0xc5, 0x01,
	0x0a, 0x2b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a,
	0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x1d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xb5, 0x02, 0x0a, 0x23, 0x52, 0x65, 0x61, 0x64, 0x46, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a,
	0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x58, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61,
	0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x5e, 0x0a,
	0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xd0, 0x04,
	0x0a, 0x29, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8b, 0x01, 0x0a, 0x24,
	0x69, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42,
	0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x21, 0x69, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x61, 0x77, 0x73,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x77, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x68, 0x74, 0x74,
	0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x12, 0x67, 0x63, 0x70, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x67, 0x63, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7a, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6c,
	0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x22, 0xa1, 0x04, 0x0a, 0x1b, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x12, 0x4b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x5e, 0x0a,
	0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x12, 0x2c, 0x0a,
	0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x12, 0x66, 0x0a, 0x0d, 0x64,
	0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f,
	0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x51, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f,
	0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x06, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f,
	0x62, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x64,
	0x0a, 0x0f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62,
	0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x62,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72,
	0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xd5, 0x02, 0x0a,
	0x25, 0x44, 0x65, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x42,
	0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x98, 0x01, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62,
	0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x1a, 0x90, 0x01, 0x0a, 0x19, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x5d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x47, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x78,
	0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xb5, 0x01, 0x0a, 0x24, 0x44, 0x65, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x78, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a,
	0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x64, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x64, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0xe5, 0x02, 0x0a,
	0x2b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x07,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x6a, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x11, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0xcf, 0x02, 0x0a, 0x24, 0x52, 0x65, 0x61, 0x64, 0x43, 0x61, 0x6e,
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x54, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f,
	0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4f, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x14, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb5, 0x01, 0x0a, 0x1a, 0x5a, 0x49, 0x50, 0x42, 0x6c,
	0x6f, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x82, 0x01, 0x0a, 0x1f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x1c, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x22, 0xda,
	0x02, 0x0a, 0x21, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x42, 0x6c, 0x6f,
	0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72,
	0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x68, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x57,
	0x69, 0x74, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x1a, 0x75, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62,
	0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x43, 0x5a, 0x41, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62,
	0x61, 0x72, 0x6e, 0x2f, 0x62, 0x62, 0x2d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescOnce sync.Once
	file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescData = file_pkg_proto_configuration_blobstore_blobstore_proto_rawDesc
)

func file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescGZIP() []byte {
	file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescOnce.Do(func() {
		file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescData)
	})
	return file_pkg_proto_configuration_blobstore_blobstore_proto_rawDescData
}

var file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_pkg_proto_configuration_blobstore_blobstore_proto_goTypes = []any{
	(*BlobstoreConfiguration)(nil),                              // 0: buildbarn.configuration.blobstore.BlobstoreConfiguration
	(*BlobAccessConfiguration)(nil),                             // 1: buildbarn.configuration.blobstore.BlobAccessConfiguration
	(*ReadCachingBlobAccessConfiguration)(nil),                  // 2: buildbarn.configuration.blobstore.ReadCachingBlobAccessConfiguration
	(*ShardingBlobAccessConfiguration)(nil),                     // 3: buildbarn.configuration.blobstore.ShardingBlobAccessConfiguration
	(*MirroredBlobAccessConfiguration)(nil),                     // 4: buildbarn.configuration.blobstore.MirroredBlobAccessConfiguration
	(*LocalBlobAccessConfiguration)(nil),                        // 5: buildbarn.configuration.blobstore.LocalBlobAccessConfiguration
	(*ExistenceCachingBlobAccessConfiguration)(nil),             // 6: buildbarn.configuration.blobstore.ExistenceCachingBlobAccessConfiguration
	(*CompletenessCheckingBlobAccessConfiguration)(nil),         // 7: buildbarn.configuration.blobstore.CompletenessCheckingBlobAccessConfiguration
	(*ReadFallbackBlobAccessConfiguration)(nil),                 // 8: buildbarn.configuration.blobstore.ReadFallbackBlobAccessConfiguration
	(*ReferenceExpandingBlobAccessConfiguration)(nil),           // 9: buildbarn.configuration.blobstore.ReferenceExpandingBlobAccessConfiguration
	(*BlobReplicatorConfiguration)(nil),                         // 10: buildbarn.configuration.blobstore.BlobReplicatorConfiguration
	(*QueuedBlobReplicatorConfiguration)(nil),                   // 11: buildbarn.configuration.blobstore.QueuedBlobReplicatorConfiguration
	(*ConcurrencyLimitingBlobReplicatorConfiguration)(nil),      // 12: buildbarn.configuration.blobstore.ConcurrencyLimitingBlobReplicatorConfiguration
	(*DemultiplexingBlobAccessConfiguration)(nil),               // 13: buildbarn.configuration.blobstore.DemultiplexingBlobAccessConfiguration
	(*DemultiplexedBlobAccessConfiguration)(nil),                // 14: buildbarn.configuration.blobstore.DemultiplexedBlobAccessConfiguration
	(*ActionResultExpiringBlobAccessConfiguration)(nil),         // 15: buildbarn.configuration.blobstore.ActionResultExpiringBlobAccessConfiguration
	(*ReadCanaryingBlobAccessConfiguration)(nil),                // 16: buildbarn.configuration.blobstore.ReadCanaryingBlobAccessConfiguration
	(*ZIPBlobAccessConfiguration)(nil),                          // 17: buildbarn.configuration.blobstore.ZIPBlobAccessConfiguration
	(*WithLabelsBlobAccessConfiguration)(nil),                   // 18: buildbarn.configuration.blobstore.WithLabelsBlobAccessConfiguration
	(*ShardingBlobAccessConfiguration_Shard)(nil),               // 19: buildbarn.configuration.blobstore.ShardingBlobAccessConfiguration.Shard
	(*LocalBlobAccessConfiguration_KeyLocationMapInMemory)(nil), // 20: buildbarn.configuration.blobstore.LocalBlobAccessConfiguration.KeyLocationMapInMemory
	(*LocalBlobAccessConfiguration_BlocksInMemory)(nil),         // 21: buildbarn.configuration.blobstore.LocalBlobAccessConfiguration.BlocksInMemory
	(*LocalBlobAccessConfiguration_BlocksOnBlockDevice)(nil),    // 22: buildbarn.configuration.blobstore.LocalBlobAccessConfiguration.BlocksOnBlockDevice
	(*LocalBlobAccessConfiguration_Persistent)(nil),             // 23: buildbarn.configuration.blobstore.LocalBlobAccessConfiguration.Persistent
	nil,                               // 24: buildbarn.configuration.blobstore.DemultiplexingBlobAccessConfiguration.InstanceNamePrefixesEntry
	nil,                               // 25: buildbarn.configuration.blobstore.WithLabelsBlobAccessConfiguration.LabelsEntry
	(*grpc.ClientConfiguration)(nil),  // 26: buildbarn.configuration.grpc.ClientConfiguration
	(*status.Status)(nil),             // 27: google.rpc.Status
	(*blockdevice.Configuration)(nil), // 28: buildbarn.configuration.blockdevice.Configuration
	(*digest.ExistenceCacheConfiguration)(nil), // 29: buildbarn.configuration.digest.ExistenceCacheConfiguration
	(*aws.SessionConfiguration)(nil),           // 30: buildbarn.configuration.cloud.aws.SessionConfiguration
	(*http.ClientConfiguration)(nil),           // 31: buildbarn.configuration.http.ClientConfiguration
	(*gcp.ClientOptionsConfiguration)(nil),     // 32: buildbarn.configuration.cloud.gcp.ClientOptionsConfiguration
	(*emptypb.Empty)(nil),                      // 33: google.protobuf.Empty
	(*durationpb.Duration)(nil),                // 34: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),              // 35: google.protobuf.Timestamp
}
var file_pkg_proto_configuration_blobstore_blobstore_proto_depIdxs = []int32{
	1,  // 0: buildbarn.configuration.blobstore.BlobstoreConfiguration.content_addressable_storage:type_name -> buildbarn.configuration.blobstore.BlobAccessConfiguration
	1,  // 1: buildbarn.configuration.blobstore.BlobstoreConfiguration.action_cache:type_name -> buildbarn.configuration.blobstore.BlobAccessConfiguration
	2,  // 2: buildbarn.configuration.blobstore.BlobAccessConfiguration.read_caching:type_name -> buildbarn.configuration.blobstore.ReadCachingBlobAccessConfiguration
	26, // 3: buildbarn.configuration.blobstore.BlobAccessConfiguration.grpc:type_name -> buildbarn.configuration.grpc.ClientConfiguration
	27, // 4: buildbarn.configuration.blobstore.BlobAccessConfiguration.error:type_name -> google.rpc.Status
	3,  // 5: buildbarn.configuration.blobstore.BlobAccessConfiguration.sharding:type_name -> buildbarn.configuration.blobstore.ShardingBlobAccessConfiguration
	4,  // 6: buildbarn.configuration.blobstore.BlobAccessConfiguration.mirrored:type_name -> buildbarn.configuration.blobstore.MirroredBlobAccessConfiguration
	5,  // 7: buildbarn.configuration.blobstore.BlobAccessConfiguration.local:type_name -> buildbarn.configuration.blobstore.LocalBlobAccessConfiguration
	6,  // 8: buildbarn.configuration.blobstore.BlobAccessConfiguration.existence_caching:type_name -> buildbarn.configuration.blobstore.ExistenceCachingBlobAccessConfiguration
	7,  // 9: buildbarn.configuration.blobstore.BlobAccessConfiguration.completeness_checking:type_name -> buildbarn.configuration.blobstore.CompletenessCheckingBlobAccessConfiguration
	8,  // 10: buildbarn.configuration.blobstore.BlobAccessConfiguration.read_fallback:type_name -> buildbarn.configuration.blobstore.ReadFallbackBlobAccessConfiguration
	9,  // 11: buildbarn.configuration.blobstore.BlobAccessConfiguration.reference_expanding:type_name -> buildbarn.configuration.blobstore.ReferenceExpandingBlobAccessConfiguration
	13, // 12: buildbarn.configuration.blobstore.BlobAccessConfiguration.demultiplexing:type_name -> buildbarn.configuration.blobstore.DemultiplexingBlobAccessConfiguration
	1,  // 13: buildbarn.configuration.blobstore.BlobAccessConfiguration.hierarchical_instance_names:type_name -> buildbarn.configuration.blobstore.BlobAccessConfiguration
	15, // 14: buildbarn.configuration.blobstore.BlobAccessConfiguration.action_result_expiring:type_name -> buildbarn.configuration.blobstore.ActionResultExpiringBlobAccessConfiguration
	16, // 15: buildbarn.configuration.blobstore.BlobAccessConfiguration.read_canarying:type_name -> buildbarn.configuration.blobstore.ReadCanaryingBlobAccessConfiguration
	17, // 16: buildbarn.configuration.blobstore.BlobAccessConfiguration.zip_reading:type_name -> buildbarn.configuration.blobstore.ZIPBlobAccessConfiguration
	17, // 17: buildbarn.configuration.blobstore.BlobAccessConfiguration.zip_writing:type_name -> buildbarn.configuration.blobstore.ZIPBlobAccessConfiguration
	18, // 18: buildbarn.configuration.blobstore.BlobAccessConfiguration.with_labels:type_name -> buildbarn.configuration.blobstore.WithLabelsBlobAccessConfiguration
	1,  // 19: buildbarn.configuration.blobstore.ReadCachingBlobAccessConfiguration.slow:type_name -> buildbarn.configuration.blobstore.BlobAccessConfiguration
	1,  // 20: buildbarn.configuration.blobstore.ReadCachingBlobAccessConfiguration.fast:type_name -> buildbarn.configuration.blobstore.BlobAccessConfiguration
	10, // 21: buildbarn.configuration.blobstore.ReadCachingBlobAccessConfiguration.replicator:type_name -> buildbarn.configuration.blobstore.BlobReplicatorConfiguration
	19, // 22: buildbarn.configuration.blobstore.ShardingBlobAccessConfiguration.shards:type_name -> buildbarn.configuration.blobstore.ShardingBlobAccessConfiguration.Shard
	1,  // 23: buildbarn.configuration.blobstore.MirroredBlobAccessConfiguration.backend_a:type_name -> buildbarn.configuration.blobstore.BlobAccessConfiguration
	1,  // 24: buildbarn.configuration.blobstore.MirroredBlobAccessConfiguration.backend_b:type_name -> buildbarn.configuration.blobstore.BlobAccessConfiguration
	10, // 25: buildbarn.configuration.blobstore.MirroredBlobAccessConfiguration.replicator_a_to_b:type_name -> buildbarn.configuration.blobstore.BlobReplicatorConfiguration
	10, // 26: buildbarn.configuration.blobstore.MirroredBlobAccessConfiguration.replicator_b_to_a:type_name -> buildbarn.configuration.blobstore.BlobReplicatorConfiguration
	20, // 27: buildbarn.configuration.blobstore.LocalBlobAccessConfiguration.key_location_map_in_memory:type_name -> buildbarn.configuration.blobstore.LocalBlobAccessConfiguration.KeyLocationMapInMemory
	28, // 28: buildbarn.configuration.blobstore.LocalBlobAccessConfiguration.key_location_map_on_block_device:type_name -> buildbarn.configuration.blockdevice.Configuration
	21, // 29: buildbarn.configuration.blobstore.LocalBlobAccessConfiguration.blocks_in_memory:type_name -> buildbarn.configuration.blobstore.LocalBlobAccessConfiguration.BlocksInMemory
	22, // 30: buildbarn.configuration.blobstore.LocalBlobAccessConfiguration.blocks_on_block_device:type_name -> buildbarn.configuration.blobstore.LocalBlobAccessConfiguration.BlocksOnBlockDevice
	23, // 31: buildbarn.configuration.blobstore.LocalBlobAccessConfiguration.persistent:type_name -> buildbarn.configuration.blobstore.LocalBlobAccessConfiguration.Persistent
	1,  // 32: buildbarn.configuration.blobstore.ExistenceCachingBlobAccessConfiguration.backend:type_name -> buildbarn.configuration.blobstore.BlobAccessConfiguration
	29, // 33: buildbarn.configuration.blobstore.ExistenceCachingBlobAccessConfiguration.existence_cache:type_name -> buildbarn.configuration.digest.ExistenceCacheConfiguration
	1,  // 34: buildbarn.configuration.blobstore.CompletenessCheckingBlobAccessConfiguration.backend:type_name -> buildbarn.configuration.blobstore.BlobAccessConfiguration
	1,  // 35: buildbarn.configuration.blobstore.ReadFallbackBlobAccessConfiguration.primary:type_name -> buildbarn.configuration.blobstore.BlobAccessConfiguration
	1,  // 36: buildbarn.configuration.blobstore.ReadFallbackBlobAccessConfiguration.secondary:type_name -> buildbarn.configuration.blobstore.BlobAccessConfiguration
	10, // 37: buildbarn.configuration.blobstore.ReadFallbackBlobAccessConfiguration.replicator:type_name -> buildbarn.configuration.blobstore.BlobReplicatorConfiguration
	1,  // 38: buildbarn.configuration.blobstore.ReferenceExpandingBlobAccessConfiguration.indirect_content_addressable_storage:type_name -> buildbarn.configuration.blobstore.BlobAccessConfiguration
	30, // 39: buildbarn.configuration.blobstore.ReferenceExpandingBlobAccessConfiguration.aws_session:type_name -> buildbarn.configuration.cloud.aws.SessionConfiguration
	31, // 40: buildbarn.configuration.blobstore.ReferenceExpandingBlobAccessConfiguration.http_client:type_name -> buildbarn.configuration.http.ClientConfiguration
	32, // 41: buildbarn.configuration.blobstore.ReferenceExpandingBlobAccessConfiguration.gcp_client_options:type_name -> buildbarn.configuration.cloud.gcp.ClientOptionsConfiguration
	1,  // 42: buildbarn.configuration.blobstore.ReferenceExpandingBlobAccessConfiguration.content_addressable_storage:type_name -> buildbarn.configuration.blobstore.BlobAccessConfiguration
	33, // 43: buildbarn.configuration.blobstore.BlobReplicatorConfiguration.local:type_name -> google.protobuf.Empty
	26, // 44: buildbarn.configuration.blobstore.BlobReplicatorConfiguration.remote:type_name -> buildbarn.configuration.grpc.ClientConfiguration
	11, // 45: buildbarn.configuration.blobstore.BlobReplicatorConfiguration.queued:type_name -> buildbarn.configuration.blobstore.QueuedBlobReplicatorConfiguration
	33, // 46: buildbarn.configuration.blobstore.BlobReplicatorConfiguration.noop:type_name -> google.protobuf.Empty
	10, // 47: buildbarn.configuration.blobstore.BlobReplicatorConfiguration.deduplicating:type_name -> buildbarn.configuration.blobstore.BlobReplicatorConfiguration
	12, // 48: buildbarn.configuration.blobstore.BlobReplicatorConfiguration.concurrency_limiting:type_name -> buildbarn.configuration.blobstore.ConcurrencyLimitingBlobReplicatorConfiguration
	10, // 49: buildbarn.configuration.blobstore.QueuedBlobReplicatorConfiguration.base:type_name -> buildbarn.configuration.blobstore.BlobReplicatorConfiguration
	29, // 50: buildbarn.configuration.blobstore.QueuedBlobReplicatorConfiguration.existence_cache:type_name -> buildbarn.configuration.digest.ExistenceCacheConfiguration
	10, // 51: buildbarn.configuration.blobstore.ConcurrencyLimitingBlobReplicatorConfiguration.base:type_name -> buildbarn.configuration.blobstore.BlobReplicatorConfiguration
	24, // 52: buildbarn.configuration.blobstore.DemultiplexingBlobAccessConfiguration.instance_name_prefixes:type_name -> buildbarn.configuration.blobstore.DemultiplexingBlobAccessConfiguration.InstanceNamePrefixesEntry
	1,  // 53: buildbarn.configuration.blobstore.DemultiplexedBlobAccessConfiguration.backend:type_name -> buildbarn.configuration.blobstore.BlobAccessConfiguration
	1,  // 54: buildbarn.configuration.blobstore.ActionResultExpiringBlobAccessConfiguration.backend:type_name -> buildbarn.configuration.blobstore.BlobAccessConfiguration
	34, // 55: buildbarn.configuration.blobstore.ActionResultExpiringBlobAccessConfiguration.minimum_validity:type_name -> google.protobuf.Duration
	34, // 56: buildbarn.configuration.blobstore.ActionResultExpiringBlobAccessConfiguration.maximum_validity_jitter:type_name -> google.protobuf.Duration
	35, // 57: buildbarn.configuration.blobstore.ActionResultExpiringBlobAccessConfiguration.minimum_timestamp:type_name -> google.protobuf.Timestamp
	1,  // 58: buildbarn.configuration.blobstore.ReadCanaryingBlobAccessConfiguration.source:type_name -> buildbarn.configuration.blobstore.BlobAccessConfiguration
	1,  // 59: buildbarn.configuration.blobstore.ReadCanaryingBlobAccessConfiguration.replica:type_name -> buildbarn.configuration.blobstore.BlobAccessConfiguration
	34, // 60: buildbarn.configuration.blobstore.ReadCanaryingBlobAccessConfiguration.maximum_cache_duration:type_name -> google.protobuf.Duration
	29, // 61: buildbarn.configuration.blobstore.ZIPBlobAccessConfiguration.data_integrity_validation_cache:type_name -> buildbarn.configuration.digest.ExistenceCacheConfiguration
	1,  // 62: buildbarn.configuration.blobstore.WithLabelsBlobAccessConfiguration.backend:type_name -> buildbarn.configuration.blobstore.BlobAccessConfiguration
	25, // 63: buildbarn.configuration.blobstore.WithLabelsBlobAccessConfiguration.labels:type_name -> buildbarn.configuration.blobstore.WithLabelsBlobAccessConfiguration.LabelsEntry
	1,  // 64: buildbarn.configuration.blobstore.ShardingBlobAccessConfiguration.Shard.backend:type_name -> buildbarn.configuration.blobstore.BlobAccessConfiguration
	28, // 65: buildbarn.configuration.blobstore.LocalBlobAccessConfiguration.BlocksOnBlockDevice.source:type_name -> buildbarn.configuration.blockdevice.Configuration
	29, // 66: buildbarn.configuration.blobstore.LocalBlobAccessConfiguration.BlocksOnBlockDevice.data_integrity_validation_cache:type_name -> buildbarn.configuration.digest.ExistenceCacheConfiguration
	34, // 67: buildbarn.configuration.blobstore.LocalBlobAccessConfiguration.Persistent.minimum_epoch_interval:type_name -> google.protobuf.Duration
	14, // 68: buildbarn.configuration.blobstore.DemultiplexingBlobAccessConfiguration.InstanceNamePrefixesEntry.value:type_name -> buildbarn.configuration.blobstore.DemultiplexedBlobAccessConfiguration
	1,  // 69: buildbarn.configuration.blobstore.WithLabelsBlobAccessConfiguration.LabelsEntry.value:type_name -> buildbarn.configuration.blobstore.BlobAccessConfiguration
	70, // [70:70] is the sub-list for method output_type
	70, // [70:70] is the sub-list for method input_type
	70, // [70:70] is the sub-list for extension type_name
	70, // [70:70] is the sub-list for extension extendee
	0,  // [0:70] is the sub-list for field type_name
}

func init() { file_pkg_proto_configuration_blobstore_blobstore_proto_init() }
func file_pkg_proto_configuration_blobstore_blobstore_proto_init() {
	if File_pkg_proto_configuration_blobstore_blobstore_proto != nil {
		return
	}
	file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[1].OneofWrappers = []any{
		(*BlobAccessConfiguration_ReadCaching)(nil),
		(*BlobAccessConfiguration_Grpc)(nil),
		(*BlobAccessConfiguration_Error)(nil),
		(*BlobAccessConfiguration_Sharding)(nil),
		(*BlobAccessConfiguration_Mirrored)(nil),
		(*BlobAccessConfiguration_Local)(nil),
		(*BlobAccessConfiguration_ExistenceCaching)(nil),
		(*BlobAccessConfiguration_CompletenessChecking)(nil),
		(*BlobAccessConfiguration_ReadFallback)(nil),
		(*BlobAccessConfiguration_ReferenceExpanding)(nil),
		(*BlobAccessConfiguration_Demultiplexing)(nil),
		(*BlobAccessConfiguration_HierarchicalInstanceNames)(nil),
		(*BlobAccessConfiguration_ActionResultExpiring)(nil),
		(*BlobAccessConfiguration_ReadCanarying)(nil),
		(*BlobAccessConfiguration_ZipReading)(nil),
		(*BlobAccessConfiguration_ZipWriting)(nil),
		(*BlobAccessConfiguration_WithLabels)(nil),
		(*BlobAccessConfiguration_Label)(nil),
	}
	file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[5].OneofWrappers = []any{
		(*LocalBlobAccessConfiguration_KeyLocationMapInMemory_)(nil),
		(*LocalBlobAccessConfiguration_KeyLocationMapOnBlockDevice)(nil),
		(*LocalBlobAccessConfiguration_BlocksInMemory_)(nil),
		(*LocalBlobAccessConfiguration_BlocksOnBlockDevice_)(nil),
	}
	file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes[10].OneofWrappers = []any{
		(*BlobReplicatorConfiguration_Local)(nil),
		(*BlobReplicatorConfiguration_Remote)(nil),
		(*BlobReplicatorConfiguration_Queued)(nil),
		(*BlobReplicatorConfiguration_Noop)(nil),
		(*BlobReplicatorConfiguration_Deduplicating)(nil),
		(*BlobReplicatorConfiguration_ConcurrencyLimiting)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_proto_configuration_blobstore_blobstore_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_proto_configuration_blobstore_blobstore_proto_goTypes,
		DependencyIndexes: file_pkg_proto_configuration_blobstore_blobstore_proto_depIdxs,
		MessageInfos:      file_pkg_proto_configuration_blobstore_blobstore_proto_msgTypes,
	}.Build()
	File_pkg_proto_configuration_blobstore_blobstore_proto = out.File
	file_pkg_proto_configuration_blobstore_blobstore_proto_rawDesc = nil
	file_pkg_proto_configuration_blobstore_blobstore_proto_goTypes = nil
	file_pkg_proto_configuration_blobstore_blobstore_proto_depIdxs = nil
}
