// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: pkg/proto/configuration/auth/auth.proto

package auth

import (
	spiffe "github.com/buildbarn/bb-storage/pkg/proto/configuration/spiffe"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AuthorizerConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Policy:
	//	*AuthorizerConfiguration_Allow
	//	*AuthorizerConfiguration_InstanceNamePrefix
	//	*AuthorizerConfiguration_Deny
	//	*AuthorizerConfiguration_Spiffe
	Policy isAuthorizerConfiguration_Policy `protobuf_oneof:"policy"`
}

func (x *AuthorizerConfiguration) Reset() {
	*x = AuthorizerConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_configuration_auth_auth_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizerConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizerConfiguration) ProtoMessage() {}

func (x *AuthorizerConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_auth_auth_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizerConfiguration.ProtoReflect.Descriptor instead.
func (*AuthorizerConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_auth_auth_proto_rawDescGZIP(), []int{0}
}

func (m *AuthorizerConfiguration) GetPolicy() isAuthorizerConfiguration_Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (x *AuthorizerConfiguration) GetAllow() *emptypb.Empty {
	if x, ok := x.GetPolicy().(*AuthorizerConfiguration_Allow); ok {
		return x.Allow
	}
	return nil
}

func (x *AuthorizerConfiguration) GetInstanceNamePrefix() *InstanceNameAuthorizer {
	if x, ok := x.GetPolicy().(*AuthorizerConfiguration_InstanceNamePrefix); ok {
		return x.InstanceNamePrefix
	}
	return nil
}

func (x *AuthorizerConfiguration) GetDeny() *emptypb.Empty {
	if x, ok := x.GetPolicy().(*AuthorizerConfiguration_Deny); ok {
		return x.Deny
	}
	return nil
}

func (x *AuthorizerConfiguration) GetSpiffe() *SpiffeAuthorizer {
	if x, ok := x.GetPolicy().(*AuthorizerConfiguration_Spiffe); ok {
		return x.Spiffe
	}
	return nil
}

type isAuthorizerConfiguration_Policy interface {
	isAuthorizerConfiguration_Policy()
}

type AuthorizerConfiguration_Allow struct {
	Allow *emptypb.Empty `protobuf:"bytes,1,opt,name=allow,proto3,oneof"`
}

type AuthorizerConfiguration_InstanceNamePrefix struct {
	InstanceNamePrefix *InstanceNameAuthorizer `protobuf:"bytes,2,opt,name=instance_name_prefix,json=instanceNamePrefix,proto3,oneof"`
}

type AuthorizerConfiguration_Deny struct {
	Deny *emptypb.Empty `protobuf:"bytes,3,opt,name=deny,proto3,oneof"`
}

type AuthorizerConfiguration_Spiffe struct {
	Spiffe *SpiffeAuthorizer `protobuf:"bytes,4,opt,name=spiffe,proto3,oneof"`
}

func (*AuthorizerConfiguration_Allow) isAuthorizerConfiguration_Policy() {}

func (*AuthorizerConfiguration_InstanceNamePrefix) isAuthorizerConfiguration_Policy() {}

func (*AuthorizerConfiguration_Deny) isAuthorizerConfiguration_Policy() {}

func (*AuthorizerConfiguration_Spiffe) isAuthorizerConfiguration_Policy() {}

type InstanceNameAuthorizer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowedInstanceNamePrefixes []string `protobuf:"bytes,1,rep,name=allowed_instance_name_prefixes,json=allowedInstanceNamePrefixes,proto3" json:"allowed_instance_name_prefixes,omitempty"`
}

func (x *InstanceNameAuthorizer) Reset() {
	*x = InstanceNameAuthorizer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_configuration_auth_auth_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceNameAuthorizer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceNameAuthorizer) ProtoMessage() {}

func (x *InstanceNameAuthorizer) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_auth_auth_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceNameAuthorizer.ProtoReflect.Descriptor instead.
func (*InstanceNameAuthorizer) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_auth_auth_proto_rawDescGZIP(), []int{1}
}

func (x *InstanceNameAuthorizer) GetAllowedInstanceNamePrefixes() []string {
	if x != nil {
		return x.AllowedInstanceNamePrefixes
	}
	return nil
}

type SpiffeAuthorizer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceNameSubjectMap map[string]*spiffe.SubjectMatcher `protobuf:"bytes,2,rep,name=instance_name_subject_map,json=instanceNameSubjectMap,proto3" json:"instance_name_subject_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SpiffeAuthorizer) Reset() {
	*x = SpiffeAuthorizer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_configuration_auth_auth_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpiffeAuthorizer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpiffeAuthorizer) ProtoMessage() {}

func (x *SpiffeAuthorizer) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_auth_auth_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpiffeAuthorizer.ProtoReflect.Descriptor instead.
func (*SpiffeAuthorizer) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_auth_auth_proto_rawDescGZIP(), []int{2}
}

func (x *SpiffeAuthorizer) GetInstanceNameSubjectMap() map[string]*spiffe.SubjectMatcher {
	if x != nil {
		return x.InstanceNameSubjectMap
	}
	return nil
}

var File_pkg_proto_configuration_auth_auth_proto protoreflect.FileDescriptor

var file_pkg_proto_configuration_auth_auth_proto_rawDesc = []byte{
	0x0a, 0x27, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x70,
	0x69, 0x66, 0x66, 0x65, 0x2f, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xb5, 0x02, 0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x68, 0x0a,
	0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x65, 0x6e, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x04, 0x64, 0x65, 0x6e, 0x79, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72,
	0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x70, 0x69, 0x66, 0x66, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x5d, 0x0a, 0x16, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x1e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1b, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0x95, 0x02, 0x0a, 0x10, 0x53, 0x70, 0x69,
	0x66, 0x66, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x85, 0x01,
	0x0a, 0x19, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4a, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x53, 0x70, 0x69, 0x66, 0x66, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4d, 0x61, 0x70, 0x1a, 0x79, 0x0a, 0x1b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72,
	0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2f, 0x62, 0x62, 0x2d, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_proto_configuration_auth_auth_proto_rawDescOnce sync.Once
	file_pkg_proto_configuration_auth_auth_proto_rawDescData = file_pkg_proto_configuration_auth_auth_proto_rawDesc
)

func file_pkg_proto_configuration_auth_auth_proto_rawDescGZIP() []byte {
	file_pkg_proto_configuration_auth_auth_proto_rawDescOnce.Do(func() {
		file_pkg_proto_configuration_auth_auth_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_proto_configuration_auth_auth_proto_rawDescData)
	})
	return file_pkg_proto_configuration_auth_auth_proto_rawDescData
}

var file_pkg_proto_configuration_auth_auth_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_pkg_proto_configuration_auth_auth_proto_goTypes = []interface{}{
	(*AuthorizerConfiguration)(nil), // 0: buildbarn.configuration.auth.AuthorizerConfiguration
	(*InstanceNameAuthorizer)(nil),  // 1: buildbarn.configuration.auth.InstanceNameAuthorizer
	(*SpiffeAuthorizer)(nil),        // 2: buildbarn.configuration.auth.SpiffeAuthorizer
	nil,                             // 3: buildbarn.configuration.auth.SpiffeAuthorizer.InstanceNameSubjectMapEntry
	(*emptypb.Empty)(nil),           // 4: google.protobuf.Empty
	(*spiffe.SubjectMatcher)(nil),   // 5: buildbarn.configuration.spiffe.SubjectMatcher
}
var file_pkg_proto_configuration_auth_auth_proto_depIdxs = []int32{
	4, // 0: buildbarn.configuration.auth.AuthorizerConfiguration.allow:type_name -> google.protobuf.Empty
	1, // 1: buildbarn.configuration.auth.AuthorizerConfiguration.instance_name_prefix:type_name -> buildbarn.configuration.auth.InstanceNameAuthorizer
	4, // 2: buildbarn.configuration.auth.AuthorizerConfiguration.deny:type_name -> google.protobuf.Empty
	2, // 3: buildbarn.configuration.auth.AuthorizerConfiguration.spiffe:type_name -> buildbarn.configuration.auth.SpiffeAuthorizer
	3, // 4: buildbarn.configuration.auth.SpiffeAuthorizer.instance_name_subject_map:type_name -> buildbarn.configuration.auth.SpiffeAuthorizer.InstanceNameSubjectMapEntry
	5, // 5: buildbarn.configuration.auth.SpiffeAuthorizer.InstanceNameSubjectMapEntry.value:type_name -> buildbarn.configuration.spiffe.SubjectMatcher
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_pkg_proto_configuration_auth_auth_proto_init() }
func file_pkg_proto_configuration_auth_auth_proto_init() {
	if File_pkg_proto_configuration_auth_auth_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_proto_configuration_auth_auth_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizerConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_configuration_auth_auth_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceNameAuthorizer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_configuration_auth_auth_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpiffeAuthorizer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_proto_configuration_auth_auth_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*AuthorizerConfiguration_Allow)(nil),
		(*AuthorizerConfiguration_InstanceNamePrefix)(nil),
		(*AuthorizerConfiguration_Deny)(nil),
		(*AuthorizerConfiguration_Spiffe)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_proto_configuration_auth_auth_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_proto_configuration_auth_auth_proto_goTypes,
		DependencyIndexes: file_pkg_proto_configuration_auth_auth_proto_depIdxs,
		MessageInfos:      file_pkg_proto_configuration_auth_auth_proto_msgTypes,
	}.Build()
	File_pkg_proto_configuration_auth_auth_proto = out.File
	file_pkg_proto_configuration_auth_auth_proto_rawDesc = nil
	file_pkg_proto_configuration_auth_auth_proto_goTypes = nil
	file_pkg_proto_configuration_auth_auth_proto_depIdxs = nil
}
