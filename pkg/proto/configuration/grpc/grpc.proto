syntax = "proto3";

package buildbarn.configuration.grpc;

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "pkg/proto/configuration/tls/tls.proto";
import "pkg/proto/configuration/spiffe/spiffe.proto";

option go_package = "github.com/buildbarn/bb-storage/pkg/proto/configuration/grpc";

message ClientConfiguration {
  // Address of the gRPC server to which to connect. This string may be
  // in the form of "address:port" or "unix:///path/of/unix/socket".
  string address = 1;

  // TLS configuration. TLS is not enabled when left unset.
  buildbarn.configuration.tls.ClientConfiguration tls = 2;

  // Keepalive messages for point-to-point healthchecking. Keepalive
  // is not enabled when left unset.
  //
  // WARNING: When enabling this option, please make sure that
  // keepalive_enforcement_policy is set on the server with a
  // configuration that permits these keepalives. Failure to do this
  // will result in "transport is closing" errors being returned to
  // the client. The default server configuration is unlikely to be
  // correct.
  ClientKeepaliveConfiguration keepalive = 3;

  // List of gRPC metadata headers to forward from the calling context.
  // Valid header names include:
  //
  // - "authorization":
  //   The bearer token (e.g. an OAuth2 access token) of the client.
  // - "build.bazel.remote.execution.v2.requestmetadata-bin":
  //   build.bazel.remote.execution.v2.RequestMetadata Protobuf message
  //   provided by the client that contains the name of the build tool,
  //   its version number and information about the target being built.
  // - "user-agent":
  //   Name and version of the low-level transport library used by the
  //   client.
  //
  // Header names must be lower case.
  //
  // Note: Keep in mind that this option can only be used to forward
  // metadata from incoming calls on gRPC servers to outgoing calls on
  // gRPC clients. This means that this option cannot be used to let
  // bb-scheduler forward client provided credentials to workers. That
  // would only be possible if bb-scheduler made outgoing connections to
  // workers, which is not the case.
  repeated string forward_metadata = 4;

  message HeaderValues {
    string header = 1;
    repeated string values = 2;
  }

  // Map of gRPC metadata headers to set in client connection.
  // Header names must be lower case.
  repeated HeaderValues add_metadata = 5;

  // Oauth authentication settings. More information:
  // https://grpc.io/docs/guides/auth/
  ClientOAuthConfiguration oauth = 6;

  // List of gRPC metadata headers to forward from the calling context,
  // and to reuse in successive requests.
  //
  // This option is useful when bb_storage is used as a personal proxy.
  // It allows clients (e.g., Bazel) to inject credentials into
  // bb_storage, thereby allowing other clients to access backends
  // without any further authentication.
  //
  // NOTE: Using this option in networked and multi-user environments is
  // strongly discouraged, as it allows users to hijack each other's
  // credentials.
  repeated string forward_and_reuse_metadata = 7;

  // The gRPC connection's initial stream window size.  See grpc-go
  // WithInitialWindowSize
  int32 initial_window_size_bytes = 8;

  // The gRPC connection's initial connection window size.  See grpc-go
  // WithInitialConnWindowSize
  int32 initial_conn_window_size_bytes = 9;
}

message ClientKeepaliveConfiguration {
  // Amount of time without server activity that should pass before the
  // client starts sending keepalive requests.
  google.protobuf.Duration time = 1;

  // Amount of time the server may take to respond to keepalive
  // requests.
  google.protobuf.Duration timeout = 2;

  // Whether the client should send keepalive requests even if no RPC
  // activity is taking place.
  bool permit_without_stream = 3;
}

message ClientOAuthConfiguration {
  oneof credentials {
    // Use default Google credentials. More information:
    // https://developers.google.com/accounts/docs/application-default-credentials
    google.protobuf.Empty google_default_credentials = 1;

    // Service account private key to use to obtain access token.
    string service_account_key = 2;
  }

  // OAuth scopes. More information:
  // https://developers.google.com/identity/protocols/oauth2/scopes
  repeated string scopes = 3;
}

message ServerConfiguration {
  // Network addresses on which to listen (e.g., ":8980").
  repeated string listen_addresses = 1;

  // UNIX socket paths on which to listen (e.g., "/var/run/runner/grpc").
  //
  // NOTE: No facilities are provided to set the ownership or
  // permissions on the socket file. On most operating systems, the
  // socket file will have mode 0777. How the mode is interpreted when
  // changed is inconsistent between operating systems. Some require the
  // socket to be writable in order to connect, while others ignore the
  // permissions altogether.
  //
  // It is therefore strongly advised that socket files are placed
  // inside directories that have access controls set up properly.
  repeated string listen_paths = 2;

  // TLS configuration. TLS is not enabled when left unset.
  buildbarn.configuration.tls.ServerConfiguration tls = 3;

  // Policy for authenticating clients against the gRPC server.
  AuthenticationPolicy authentication_policy = 4;

  // Maximum size of a Protobuf message that may be received by this
  // server.
  int64 maximum_received_message_size_bytes = 5;

  // Policy for allowing clients to send messages for point-to-point
  // healthchecking. The default policy is used if this field is
  // unset, which currently sets min_time to 5 minutes and
  // permit_without_stream to false.
  ServerKeepaliveEnforcementPolicy keepalive_enforcement_policy = 6;

  // Service name for health check requests. The gRPC server will
  // report itself healthy for this service via the grpc.health.v1
  // protocol.
  string health_check_service = 7;

  // The gRPC connection's initial stream window size.  See grpc-go
  // InitialWindowSize
  int32 initial_window_size_bytes = 8;

  // The gRPC connection's initial connection window size.  See grpc-go
  // InitialConnWindowSize
  int32 initial_conn_window_size_bytes = 9;
}

message ServerKeepaliveEnforcementPolicy {
  // The minimum amount of time a client should wait before sending a
  // keepalive ping.
  google.protobuf.Duration min_time = 1;

  // If true, server allows keepalive pings even when there are no
  // active streams (RPCs). If false, and client sends ping when there
  // are no active streams, server will send GOAWAY and close the
  // connection.
  bool permit_without_stream = 2;
}

message AuthenticationPolicy {
  oneof policy {
    // Allow all incoming requests.
    google.protobuf.Empty allow = 1;

    // Allow incoming requests if one of multiple authentication
    // policies allows it, similar to Python's any() function.
    AnyAuthenticationPolicy any = 2;

    // Deny all incoming requests, returning a fixed error message back
    // to the client.
    string deny = 3;

    // Allow incoming requests in case they present a valid TLS
    // certificate.
    TLSClientCertificateAuthenticationPolicy tls_client_certificate = 4;
  }
}

message AnyAuthenticationPolicy {
  // Set of backing authentication policies.
  repeated AuthenticationPolicy policies = 1;
}

message TLSClientCertificateAuthenticationPolicy {
  // PEM data for the certificate authorities that should be used to
  // validate the remote TLS client.
  string client_certificate_authorities = 1;
  // Spiffe
  buildbarn.configuration.spiffe.SubjectMatcher spiffe = 10;
}
