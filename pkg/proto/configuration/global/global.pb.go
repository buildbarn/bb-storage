// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v5.27.3
// source: pkg/proto/configuration/global/global.proto

package global

import (
	grpc "github.com/buildbarn/bb-storage/pkg/proto/configuration/grpc"
	http "github.com/buildbarn/bb-storage/pkg/proto/configuration/http"
	v1 "go.opentelemetry.io/proto/otlp/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PrometheusPushgatewayConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url                     string                                                       `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Job                     string                                                       `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
	Grouping                map[string]string                                            `protobuf:"bytes,4,rep,name=grouping,proto3" json:"grouping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PushInterval            *durationpb.Duration                                         `protobuf:"bytes,5,opt,name=push_interval,json=pushInterval,proto3" json:"push_interval,omitempty"`
	HttpClient              *http.ClientConfiguration                                    `protobuf:"bytes,6,opt,name=http_client,json=httpClient,proto3" json:"http_client,omitempty"`
	PushTimeout             *durationpb.Duration                                         `protobuf:"bytes,7,opt,name=push_timeout,json=pushTimeout,proto3" json:"push_timeout,omitempty"`
	AdditionalScrapeTargets []*PrometheusPushgatewayConfiguration_AdditionalScrapeTarget `protobuf:"bytes,8,rep,name=additional_scrape_targets,json=additionalScrapeTargets,proto3" json:"additional_scrape_targets,omitempty"`
}

func (x *PrometheusPushgatewayConfiguration) Reset() {
	*x = PrometheusPushgatewayConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrometheusPushgatewayConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrometheusPushgatewayConfiguration) ProtoMessage() {}

func (x *PrometheusPushgatewayConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrometheusPushgatewayConfiguration.ProtoReflect.Descriptor instead.
func (*PrometheusPushgatewayConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_global_global_proto_rawDescGZIP(), []int{0}
}

func (x *PrometheusPushgatewayConfiguration) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PrometheusPushgatewayConfiguration) GetJob() string {
	if x != nil {
		return x.Job
	}
	return ""
}

func (x *PrometheusPushgatewayConfiguration) GetGrouping() map[string]string {
	if x != nil {
		return x.Grouping
	}
	return nil
}

func (x *PrometheusPushgatewayConfiguration) GetPushInterval() *durationpb.Duration {
	if x != nil {
		return x.PushInterval
	}
	return nil
}

func (x *PrometheusPushgatewayConfiguration) GetHttpClient() *http.ClientConfiguration {
	if x != nil {
		return x.HttpClient
	}
	return nil
}

func (x *PrometheusPushgatewayConfiguration) GetPushTimeout() *durationpb.Duration {
	if x != nil {
		return x.PushTimeout
	}
	return nil
}

func (x *PrometheusPushgatewayConfiguration) GetAdditionalScrapeTargets() []*PrometheusPushgatewayConfiguration_AdditionalScrapeTarget {
	if x != nil {
		return x.AdditionalScrapeTargets
	}
	return nil
}

type TracingConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backends           []*TracingConfiguration_Backend `protobuf:"bytes,1,rep,name=backends,proto3" json:"backends,omitempty"`
	ResourceAttributes []*v1.KeyValue                  `protobuf:"bytes,2,rep,name=resource_attributes,json=resourceAttributes,proto3" json:"resource_attributes,omitempty"`
	Sampler            *TracingConfiguration_Sampler   `protobuf:"bytes,3,opt,name=sampler,proto3" json:"sampler,omitempty"`
}

func (x *TracingConfiguration) Reset() {
	*x = TracingConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracingConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingConfiguration) ProtoMessage() {}

func (x *TracingConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingConfiguration.ProtoReflect.Descriptor instead.
func (*TracingConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_global_global_proto_rawDescGZIP(), []int{1}
}

func (x *TracingConfiguration) GetBackends() []*TracingConfiguration_Backend {
	if x != nil {
		return x.Backends
	}
	return nil
}

func (x *TracingConfiguration) GetResourceAttributes() []*v1.KeyValue {
	if x != nil {
		return x.ResourceAttributes
	}
	return nil
}

func (x *TracingConfiguration) GetSampler() *TracingConfiguration_Sampler {
	if x != nil {
		return x.Sampler
	}
	return nil
}

type SetUmaskConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Umask uint32 `protobuf:"varint,1,opt,name=umask,proto3" json:"umask,omitempty"`
}

func (x *SetUmaskConfiguration) Reset() {
	*x = SetUmaskConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUmaskConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUmaskConfiguration) ProtoMessage() {}

func (x *SetUmaskConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUmaskConfiguration.ProtoReflect.Descriptor instead.
func (*SetUmaskConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_global_global_proto_rawDescGZIP(), []int{2}
}

func (x *SetUmaskConfiguration) GetUmask() uint32 {
	if x != nil {
		return x.Umask
	}
	return 0
}

type SetResourceLimitConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoftLimit *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=soft_limit,json=softLimit,proto3" json:"soft_limit,omitempty"`
	HardLimit *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=hard_limit,json=hardLimit,proto3" json:"hard_limit,omitempty"`
}

func (x *SetResourceLimitConfiguration) Reset() {
	*x = SetResourceLimitConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetResourceLimitConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetResourceLimitConfiguration) ProtoMessage() {}

func (x *SetResourceLimitConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetResourceLimitConfiguration.ProtoReflect.Descriptor instead.
func (*SetResourceLimitConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_global_global_proto_rawDescGZIP(), []int{3}
}

func (x *SetResourceLimitConfiguration) GetSoftLimit() *wrapperspb.UInt64Value {
	if x != nil {
		return x.SoftLimit
	}
	return nil
}

func (x *SetResourceLimitConfiguration) GetHardLimit() *wrapperspb.UInt64Value {
	if x != nil {
		return x.HardLimit
	}
	return nil
}

type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tracing                     *TracingConfiguration                     `protobuf:"bytes,1,opt,name=tracing,proto3" json:"tracing,omitempty"`
	MutexProfileFraction        int32                                     `protobuf:"varint,2,opt,name=mutex_profile_fraction,json=mutexProfileFraction,proto3" json:"mutex_profile_fraction,omitempty"`
	PrometheusPushgateway       *PrometheusPushgatewayConfiguration       `protobuf:"bytes,3,opt,name=prometheus_pushgateway,json=prometheusPushgateway,proto3" json:"prometheus_pushgateway,omitempty"`
	LogPaths                    []string                                  `protobuf:"bytes,5,rep,name=log_paths,json=logPaths,proto3" json:"log_paths,omitempty"`
	DiagnosticsHttpServer       *DiagnosticsHTTPServerConfiguration       `protobuf:"bytes,6,opt,name=diagnostics_http_server,json=diagnosticsHttpServer,proto3" json:"diagnostics_http_server,omitempty"`
	SetUmask                    *SetUmaskConfiguration                    `protobuf:"bytes,7,opt,name=set_umask,json=setUmask,proto3" json:"set_umask,omitempty"`
	GrpcForwardAndReuseMetadata []string                                  `protobuf:"bytes,8,rep,name=grpc_forward_and_reuse_metadata,json=grpcForwardAndReuseMetadata,proto3" json:"grpc_forward_and_reuse_metadata,omitempty"`
	GrpcKubernetesResolvers     map[string]*GRPCKubernetesResolver        `protobuf:"bytes,16,rep,name=grpc_kubernetes_resolvers,json=grpcKubernetesResolvers,proto3" json:"grpc_kubernetes_resolvers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SetResourceLimits           map[string]*SetResourceLimitConfiguration `protobuf:"bytes,15,rep,name=set_resource_limits,json=setResourceLimits,proto3" json:"set_resource_limits,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_global_global_proto_rawDescGZIP(), []int{4}
}

func (x *Configuration) GetTracing() *TracingConfiguration {
	if x != nil {
		return x.Tracing
	}
	return nil
}

func (x *Configuration) GetMutexProfileFraction() int32 {
	if x != nil {
		return x.MutexProfileFraction
	}
	return 0
}

func (x *Configuration) GetPrometheusPushgateway() *PrometheusPushgatewayConfiguration {
	if x != nil {
		return x.PrometheusPushgateway
	}
	return nil
}

func (x *Configuration) GetLogPaths() []string {
	if x != nil {
		return x.LogPaths
	}
	return nil
}

func (x *Configuration) GetDiagnosticsHttpServer() *DiagnosticsHTTPServerConfiguration {
	if x != nil {
		return x.DiagnosticsHttpServer
	}
	return nil
}

func (x *Configuration) GetSetUmask() *SetUmaskConfiguration {
	if x != nil {
		return x.SetUmask
	}
	return nil
}

func (x *Configuration) GetGrpcForwardAndReuseMetadata() []string {
	if x != nil {
		return x.GrpcForwardAndReuseMetadata
	}
	return nil
}

func (x *Configuration) GetGrpcKubernetesResolvers() map[string]*GRPCKubernetesResolver {
	if x != nil {
		return x.GrpcKubernetesResolvers
	}
	return nil
}

func (x *Configuration) GetSetResourceLimits() map[string]*SetResourceLimitConfiguration {
	if x != nil {
		return x.SetResourceLimits
	}
	return nil
}

type DiagnosticsHTTPServerConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpServers       []*http.ServerConfiguration `protobuf:"bytes,5,rep,name=http_servers,json=httpServers,proto3" json:"http_servers,omitempty"`
	EnablePprof       bool                        `protobuf:"varint,2,opt,name=enable_pprof,json=enablePprof,proto3" json:"enable_pprof,omitempty"`
	EnablePrometheus  bool                        `protobuf:"varint,3,opt,name=enable_prometheus,json=enablePrometheus,proto3" json:"enable_prometheus,omitempty"`
	EnableActiveSpans bool                        `protobuf:"varint,4,opt,name=enable_active_spans,json=enableActiveSpans,proto3" json:"enable_active_spans,omitempty"`
}

func (x *DiagnosticsHTTPServerConfiguration) Reset() {
	*x = DiagnosticsHTTPServerConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticsHTTPServerConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticsHTTPServerConfiguration) ProtoMessage() {}

func (x *DiagnosticsHTTPServerConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticsHTTPServerConfiguration.ProtoReflect.Descriptor instead.
func (*DiagnosticsHTTPServerConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_global_global_proto_rawDescGZIP(), []int{5}
}

func (x *DiagnosticsHTTPServerConfiguration) GetHttpServers() []*http.ServerConfiguration {
	if x != nil {
		return x.HttpServers
	}
	return nil
}

func (x *DiagnosticsHTTPServerConfiguration) GetEnablePprof() bool {
	if x != nil {
		return x.EnablePprof
	}
	return false
}

func (x *DiagnosticsHTTPServerConfiguration) GetEnablePrometheus() bool {
	if x != nil {
		return x.EnablePrometheus
	}
	return false
}

func (x *DiagnosticsHTTPServerConfiguration) GetEnableActiveSpans() bool {
	if x != nil {
		return x.EnableActiveSpans
	}
	return false
}

type GRPCKubernetesResolver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiServerHttpClient *http.ClientConfiguration `protobuf:"bytes,1,opt,name=api_server_http_client,json=apiServerHttpClient,proto3" json:"api_server_http_client,omitempty"`
	ApiServerUrl        string                    `protobuf:"bytes,2,opt,name=api_server_url,json=apiServerUrl,proto3" json:"api_server_url,omitempty"`
}

func (x *GRPCKubernetesResolver) Reset() {
	*x = GRPCKubernetesResolver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GRPCKubernetesResolver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GRPCKubernetesResolver) ProtoMessage() {}

func (x *GRPCKubernetesResolver) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GRPCKubernetesResolver.ProtoReflect.Descriptor instead.
func (*GRPCKubernetesResolver) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_global_global_proto_rawDescGZIP(), []int{6}
}

func (x *GRPCKubernetesResolver) GetApiServerHttpClient() *http.ClientConfiguration {
	if x != nil {
		return x.ApiServerHttpClient
	}
	return nil
}

func (x *GRPCKubernetesResolver) GetApiServerUrl() string {
	if x != nil {
		return x.ApiServerUrl
	}
	return ""
}

type PrometheusPushgatewayConfiguration_AdditionalScrapeTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpClient        *http.ClientConfiguration `protobuf:"bytes,1,opt,name=http_client,json=httpClient,proto3" json:"http_client,omitempty"`
	Url               string                    `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	MetricNamePattern string                    `protobuf:"bytes,3,opt,name=metric_name_pattern,json=metricNamePattern,proto3" json:"metric_name_pattern,omitempty"`
}

func (x *PrometheusPushgatewayConfiguration_AdditionalScrapeTarget) Reset() {
	*x = PrometheusPushgatewayConfiguration_AdditionalScrapeTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrometheusPushgatewayConfiguration_AdditionalScrapeTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrometheusPushgatewayConfiguration_AdditionalScrapeTarget) ProtoMessage() {}

func (x *PrometheusPushgatewayConfiguration_AdditionalScrapeTarget) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrometheusPushgatewayConfiguration_AdditionalScrapeTarget.ProtoReflect.Descriptor instead.
func (*PrometheusPushgatewayConfiguration_AdditionalScrapeTarget) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_global_global_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PrometheusPushgatewayConfiguration_AdditionalScrapeTarget) GetHttpClient() *http.ClientConfiguration {
	if x != nil {
		return x.HttpClient
	}
	return nil
}

func (x *PrometheusPushgatewayConfiguration_AdditionalScrapeTarget) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PrometheusPushgatewayConfiguration_AdditionalScrapeTarget) GetMetricNamePattern() string {
	if x != nil {
		return x.MetricNamePattern
	}
	return ""
}

type TracingConfiguration_Backend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SpanExporter:
	//
	//	*TracingConfiguration_Backend_JaegerCollectorSpanExporter_
	//	*TracingConfiguration_Backend_OtlpSpanExporter
	SpanExporter isTracingConfiguration_Backend_SpanExporter `protobuf_oneof:"span_exporter"`
	// Types that are assignable to SpanProcessor:
	//
	//	*TracingConfiguration_Backend_SimpleSpanProcessor
	//	*TracingConfiguration_Backend_BatchSpanProcessor_
	SpanProcessor isTracingConfiguration_Backend_SpanProcessor `protobuf_oneof:"span_processor"`
}

func (x *TracingConfiguration_Backend) Reset() {
	*x = TracingConfiguration_Backend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracingConfiguration_Backend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingConfiguration_Backend) ProtoMessage() {}

func (x *TracingConfiguration_Backend) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingConfiguration_Backend.ProtoReflect.Descriptor instead.
func (*TracingConfiguration_Backend) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_global_global_proto_rawDescGZIP(), []int{1, 0}
}

func (m *TracingConfiguration_Backend) GetSpanExporter() isTracingConfiguration_Backend_SpanExporter {
	if m != nil {
		return m.SpanExporter
	}
	return nil
}

func (x *TracingConfiguration_Backend) GetJaegerCollectorSpanExporter() *TracingConfiguration_Backend_JaegerCollectorSpanExporter {
	if x, ok := x.GetSpanExporter().(*TracingConfiguration_Backend_JaegerCollectorSpanExporter_); ok {
		return x.JaegerCollectorSpanExporter
	}
	return nil
}

func (x *TracingConfiguration_Backend) GetOtlpSpanExporter() *grpc.ClientConfiguration {
	if x, ok := x.GetSpanExporter().(*TracingConfiguration_Backend_OtlpSpanExporter); ok {
		return x.OtlpSpanExporter
	}
	return nil
}

func (m *TracingConfiguration_Backend) GetSpanProcessor() isTracingConfiguration_Backend_SpanProcessor {
	if m != nil {
		return m.SpanProcessor
	}
	return nil
}

func (x *TracingConfiguration_Backend) GetSimpleSpanProcessor() *emptypb.Empty {
	if x, ok := x.GetSpanProcessor().(*TracingConfiguration_Backend_SimpleSpanProcessor); ok {
		return x.SimpleSpanProcessor
	}
	return nil
}

func (x *TracingConfiguration_Backend) GetBatchSpanProcessor() *TracingConfiguration_Backend_BatchSpanProcessor {
	if x, ok := x.GetSpanProcessor().(*TracingConfiguration_Backend_BatchSpanProcessor_); ok {
		return x.BatchSpanProcessor
	}
	return nil
}

type isTracingConfiguration_Backend_SpanExporter interface {
	isTracingConfiguration_Backend_SpanExporter()
}

type TracingConfiguration_Backend_JaegerCollectorSpanExporter_ struct {
	JaegerCollectorSpanExporter *TracingConfiguration_Backend_JaegerCollectorSpanExporter `protobuf:"bytes,1,opt,name=jaeger_collector_span_exporter,json=jaegerCollectorSpanExporter,proto3,oneof"`
}

type TracingConfiguration_Backend_OtlpSpanExporter struct {
	OtlpSpanExporter *grpc.ClientConfiguration `protobuf:"bytes,4,opt,name=otlp_span_exporter,json=otlpSpanExporter,proto3,oneof"`
}

func (*TracingConfiguration_Backend_JaegerCollectorSpanExporter_) isTracingConfiguration_Backend_SpanExporter() {
}

func (*TracingConfiguration_Backend_OtlpSpanExporter) isTracingConfiguration_Backend_SpanExporter() {}

type isTracingConfiguration_Backend_SpanProcessor interface {
	isTracingConfiguration_Backend_SpanProcessor()
}

type TracingConfiguration_Backend_SimpleSpanProcessor struct {
	SimpleSpanProcessor *emptypb.Empty `protobuf:"bytes,2,opt,name=simple_span_processor,json=simpleSpanProcessor,proto3,oneof"`
}

type TracingConfiguration_Backend_BatchSpanProcessor_ struct {
	BatchSpanProcessor *TracingConfiguration_Backend_BatchSpanProcessor `protobuf:"bytes,3,opt,name=batch_span_processor,json=batchSpanProcessor,proto3,oneof"`
}

func (*TracingConfiguration_Backend_SimpleSpanProcessor) isTracingConfiguration_Backend_SpanProcessor() {
}

func (*TracingConfiguration_Backend_BatchSpanProcessor_) isTracingConfiguration_Backend_SpanProcessor() {
}

type TracingConfiguration_Sampler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Policy:
	//
	//	*TracingConfiguration_Sampler_Always
	//	*TracingConfiguration_Sampler_Never
	//	*TracingConfiguration_Sampler_ParentBased_
	//	*TracingConfiguration_Sampler_TraceIdRatioBased
	//	*TracingConfiguration_Sampler_MaximumRate_
	Policy isTracingConfiguration_Sampler_Policy `protobuf_oneof:"policy"`
}

func (x *TracingConfiguration_Sampler) Reset() {
	*x = TracingConfiguration_Sampler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracingConfiguration_Sampler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingConfiguration_Sampler) ProtoMessage() {}

func (x *TracingConfiguration_Sampler) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingConfiguration_Sampler.ProtoReflect.Descriptor instead.
func (*TracingConfiguration_Sampler) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_global_global_proto_rawDescGZIP(), []int{1, 1}
}

func (m *TracingConfiguration_Sampler) GetPolicy() isTracingConfiguration_Sampler_Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (x *TracingConfiguration_Sampler) GetAlways() *emptypb.Empty {
	if x, ok := x.GetPolicy().(*TracingConfiguration_Sampler_Always); ok {
		return x.Always
	}
	return nil
}

func (x *TracingConfiguration_Sampler) GetNever() *emptypb.Empty {
	if x, ok := x.GetPolicy().(*TracingConfiguration_Sampler_Never); ok {
		return x.Never
	}
	return nil
}

func (x *TracingConfiguration_Sampler) GetParentBased() *TracingConfiguration_Sampler_ParentBased {
	if x, ok := x.GetPolicy().(*TracingConfiguration_Sampler_ParentBased_); ok {
		return x.ParentBased
	}
	return nil
}

func (x *TracingConfiguration_Sampler) GetTraceIdRatioBased() float64 {
	if x, ok := x.GetPolicy().(*TracingConfiguration_Sampler_TraceIdRatioBased); ok {
		return x.TraceIdRatioBased
	}
	return 0
}

func (x *TracingConfiguration_Sampler) GetMaximumRate() *TracingConfiguration_Sampler_MaximumRate {
	if x, ok := x.GetPolicy().(*TracingConfiguration_Sampler_MaximumRate_); ok {
		return x.MaximumRate
	}
	return nil
}

type isTracingConfiguration_Sampler_Policy interface {
	isTracingConfiguration_Sampler_Policy()
}

type TracingConfiguration_Sampler_Always struct {
	Always *emptypb.Empty `protobuf:"bytes,1,opt,name=always,proto3,oneof"`
}

type TracingConfiguration_Sampler_Never struct {
	Never *emptypb.Empty `protobuf:"bytes,2,opt,name=never,proto3,oneof"`
}

type TracingConfiguration_Sampler_ParentBased_ struct {
	ParentBased *TracingConfiguration_Sampler_ParentBased `protobuf:"bytes,3,opt,name=parent_based,json=parentBased,proto3,oneof"`
}

type TracingConfiguration_Sampler_TraceIdRatioBased struct {
	TraceIdRatioBased float64 `protobuf:"fixed64,4,opt,name=trace_id_ratio_based,json=traceIdRatioBased,proto3,oneof"`
}

type TracingConfiguration_Sampler_MaximumRate_ struct {
	MaximumRate *TracingConfiguration_Sampler_MaximumRate `protobuf:"bytes,5,opt,name=maximum_rate,json=maximumRate,proto3,oneof"`
}

func (*TracingConfiguration_Sampler_Always) isTracingConfiguration_Sampler_Policy() {}

func (*TracingConfiguration_Sampler_Never) isTracingConfiguration_Sampler_Policy() {}

func (*TracingConfiguration_Sampler_ParentBased_) isTracingConfiguration_Sampler_Policy() {}

func (*TracingConfiguration_Sampler_TraceIdRatioBased) isTracingConfiguration_Sampler_Policy() {}

func (*TracingConfiguration_Sampler_MaximumRate_) isTracingConfiguration_Sampler_Policy() {}

type TracingConfiguration_Backend_JaegerCollectorSpanExporter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint   string                    `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	HttpClient *http.ClientConfiguration `protobuf:"bytes,2,opt,name=http_client,json=httpClient,proto3" json:"http_client,omitempty"`
	Password   string                    `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Username   string                    `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *TracingConfiguration_Backend_JaegerCollectorSpanExporter) Reset() {
	*x = TracingConfiguration_Backend_JaegerCollectorSpanExporter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracingConfiguration_Backend_JaegerCollectorSpanExporter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingConfiguration_Backend_JaegerCollectorSpanExporter) ProtoMessage() {}

func (x *TracingConfiguration_Backend_JaegerCollectorSpanExporter) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingConfiguration_Backend_JaegerCollectorSpanExporter.ProtoReflect.Descriptor instead.
func (*TracingConfiguration_Backend_JaegerCollectorSpanExporter) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_global_global_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *TracingConfiguration_Backend_JaegerCollectorSpanExporter) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *TracingConfiguration_Backend_JaegerCollectorSpanExporter) GetHttpClient() *http.ClientConfiguration {
	if x != nil {
		return x.HttpClient
	}
	return nil
}

func (x *TracingConfiguration_Backend_JaegerCollectorSpanExporter) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *TracingConfiguration_Backend_JaegerCollectorSpanExporter) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type TracingConfiguration_Backend_BatchSpanProcessor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchTimeout       *durationpb.Duration `protobuf:"bytes,1,opt,name=batch_timeout,json=batchTimeout,proto3" json:"batch_timeout,omitempty"`
	Blocking           bool                 `protobuf:"varint,2,opt,name=blocking,proto3" json:"blocking,omitempty"`
	ExportTimeout      *durationpb.Duration `protobuf:"bytes,3,opt,name=export_timeout,json=exportTimeout,proto3" json:"export_timeout,omitempty"`
	MaxExportBatchSize int64                `protobuf:"varint,4,opt,name=max_export_batch_size,json=maxExportBatchSize,proto3" json:"max_export_batch_size,omitempty"`
	MaxQueueSize       int64                `protobuf:"varint,5,opt,name=max_queue_size,json=maxQueueSize,proto3" json:"max_queue_size,omitempty"`
}

func (x *TracingConfiguration_Backend_BatchSpanProcessor) Reset() {
	*x = TracingConfiguration_Backend_BatchSpanProcessor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracingConfiguration_Backend_BatchSpanProcessor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingConfiguration_Backend_BatchSpanProcessor) ProtoMessage() {}

func (x *TracingConfiguration_Backend_BatchSpanProcessor) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingConfiguration_Backend_BatchSpanProcessor.ProtoReflect.Descriptor instead.
func (*TracingConfiguration_Backend_BatchSpanProcessor) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_global_global_proto_rawDescGZIP(), []int{1, 0, 1}
}

func (x *TracingConfiguration_Backend_BatchSpanProcessor) GetBatchTimeout() *durationpb.Duration {
	if x != nil {
		return x.BatchTimeout
	}
	return nil
}

func (x *TracingConfiguration_Backend_BatchSpanProcessor) GetBlocking() bool {
	if x != nil {
		return x.Blocking
	}
	return false
}

func (x *TracingConfiguration_Backend_BatchSpanProcessor) GetExportTimeout() *durationpb.Duration {
	if x != nil {
		return x.ExportTimeout
	}
	return nil
}

func (x *TracingConfiguration_Backend_BatchSpanProcessor) GetMaxExportBatchSize() int64 {
	if x != nil {
		return x.MaxExportBatchSize
	}
	return 0
}

func (x *TracingConfiguration_Backend_BatchSpanProcessor) GetMaxQueueSize() int64 {
	if x != nil {
		return x.MaxQueueSize
	}
	return 0
}

type TracingConfiguration_Sampler_ParentBased struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoParent               *TracingConfiguration_Sampler `protobuf:"bytes,1,opt,name=no_parent,json=noParent,proto3" json:"no_parent,omitempty"`
	LocalParentNotSampled  *TracingConfiguration_Sampler `protobuf:"bytes,2,opt,name=local_parent_not_sampled,json=localParentNotSampled,proto3" json:"local_parent_not_sampled,omitempty"`
	LocalParentSampled     *TracingConfiguration_Sampler `protobuf:"bytes,3,opt,name=local_parent_sampled,json=localParentSampled,proto3" json:"local_parent_sampled,omitempty"`
	RemoteParentNotSampled *TracingConfiguration_Sampler `protobuf:"bytes,4,opt,name=remote_parent_not_sampled,json=remoteParentNotSampled,proto3" json:"remote_parent_not_sampled,omitempty"`
	RemoteParentSampled    *TracingConfiguration_Sampler `protobuf:"bytes,5,opt,name=remote_parent_sampled,json=remoteParentSampled,proto3" json:"remote_parent_sampled,omitempty"`
}

func (x *TracingConfiguration_Sampler_ParentBased) Reset() {
	*x = TracingConfiguration_Sampler_ParentBased{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracingConfiguration_Sampler_ParentBased) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingConfiguration_Sampler_ParentBased) ProtoMessage() {}

func (x *TracingConfiguration_Sampler_ParentBased) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingConfiguration_Sampler_ParentBased.ProtoReflect.Descriptor instead.
func (*TracingConfiguration_Sampler_ParentBased) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_global_global_proto_rawDescGZIP(), []int{1, 1, 0}
}

func (x *TracingConfiguration_Sampler_ParentBased) GetNoParent() *TracingConfiguration_Sampler {
	if x != nil {
		return x.NoParent
	}
	return nil
}

func (x *TracingConfiguration_Sampler_ParentBased) GetLocalParentNotSampled() *TracingConfiguration_Sampler {
	if x != nil {
		return x.LocalParentNotSampled
	}
	return nil
}

func (x *TracingConfiguration_Sampler_ParentBased) GetLocalParentSampled() *TracingConfiguration_Sampler {
	if x != nil {
		return x.LocalParentSampled
	}
	return nil
}

func (x *TracingConfiguration_Sampler_ParentBased) GetRemoteParentNotSampled() *TracingConfiguration_Sampler {
	if x != nil {
		return x.RemoteParentNotSampled
	}
	return nil
}

func (x *TracingConfiguration_Sampler_ParentBased) GetRemoteParentSampled() *TracingConfiguration_Sampler {
	if x != nil {
		return x.RemoteParentSampled
	}
	return nil
}

type TracingConfiguration_Sampler_MaximumRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SamplesPerEpoch int64                `protobuf:"varint,1,opt,name=samples_per_epoch,json=samplesPerEpoch,proto3" json:"samples_per_epoch,omitempty"`
	EpochDuration   *durationpb.Duration `protobuf:"bytes,2,opt,name=epoch_duration,json=epochDuration,proto3" json:"epoch_duration,omitempty"`
}

func (x *TracingConfiguration_Sampler_MaximumRate) Reset() {
	*x = TracingConfiguration_Sampler_MaximumRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracingConfiguration_Sampler_MaximumRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingConfiguration_Sampler_MaximumRate) ProtoMessage() {}

func (x *TracingConfiguration_Sampler_MaximumRate) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_configuration_global_global_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingConfiguration_Sampler_MaximumRate.ProtoReflect.Descriptor instead.
func (*TracingConfiguration_Sampler_MaximumRate) Descriptor() ([]byte, []int) {
	return file_pkg_proto_configuration_global_global_proto_rawDescGZIP(), []int{1, 1, 1}
}

func (x *TracingConfiguration_Sampler_MaximumRate) GetSamplesPerEpoch() int64 {
	if x != nil {
		return x.SamplesPerEpoch
	}
	return 0
}

func (x *TracingConfiguration_Sampler_MaximumRate) GetEpochDuration() *durationpb.Duration {
	if x != nil {
		return x.EpochDuration
	}
	return nil
}

var File_pkg_proto_configuration_global_global_proto protoreflect.FileDescriptor

var file_pkg_proto_configuration_global_global_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x6f, 0x70, 0x65, 0x6e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x27, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x68, 0x74,
	0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x06, 0x0a, 0x22, 0x50, 0x72, 0x6f,
	0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x50, 0x75, 0x73, 0x68, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6a, 0x6f, 0x62, 0x12, 0x6c, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72,
	0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75,
	0x73, 0x50, 0x75, 0x73, 0x68, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x3e, 0x0a, 0x0d, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x52, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61,
	0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x75, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x95, 0x01, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62,
	0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68,
	0x65, 0x75, 0x73, 0x50, 0x75, 0x73, 0x68, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x17, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xae, 0x01, 0x0a, 0x16, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x68, 0x74, 0x74,
	0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22,
	0xc3, 0x12, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x73, 0x12, 0x58, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x07,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x07, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x72, 0x1a, 0xdb, 0x07, 0x0a, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x12, 0x9f, 0x01, 0x0a, 0x1e, 0x6a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x1b, 0x6a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x12, 0x61, 0x0a, 0x12, 0x6f, 0x74, 0x6c, 0x70, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x74, 0x6c, 0x70, 0x53, 0x70, 0x61, 0x6e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x15, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x73, 0x70, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x01, 0x52, 0x13,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x12, 0x83, 0x01, 0x0a, 0x14, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x70,
	0x61, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x70, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x12, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x70, 0x61, 0x6e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x1a, 0xc5, 0x01, 0x0a, 0x1b, 0x4a, 0x61,
	0x65, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x61,
	0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x68,
	0x74, 0x74, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x1a, 0x8b, 0x02, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x70, 0x61, 0x6e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x42, 0x10, 0x0a, 0x0e, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x1a, 0xc0, 0x08, 0x0a, 0x07, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x12, 0x30,
	0x0a, 0x06, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x06, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73,
	0x12, 0x2e, 0x0a, 0x05, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x65, 0x76, 0x65, 0x72,
	0x12, 0x6d, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61,
	0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x64, 0x12,
	0x31, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52,
	0x11, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x61, 0x73,
	0x65, 0x64, 0x12, 0x6d, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x61, 0x74,
	0x65, 0x1a, 0xba, 0x04, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x64, 0x12, 0x59, 0x0a, 0x09, 0x6e, 0x6f, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x72, 0x52, 0x08, 0x6e, 0x6f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x75, 0x0a, 0x18,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x15, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x64, 0x12, 0x6e, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52,
	0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x64, 0x12, 0x77, 0x0a, 0x19, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61,
	0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x72, 0x52, 0x16, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x12, 0x70, 0x0a, 0x15,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x1a, 0x7b,
	0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x50, 0x65, 0x72, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x40, 0x0a, 0x0e, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x2d, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x55, 0x6d, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x75, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x75,
	0x6d, 0x61, 0x73, 0x6b, 0x22, 0x99, 0x01, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x6f, 0x66, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x68, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0xd3, 0x08, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x69,
	0x6e, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x75, 0x74, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x6d, 0x75, 0x74, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x79, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x6d,
	0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74,
	0x68, 0x65, 0x75, 0x73, 0x50, 0x75, 0x73, 0x68, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x70, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x50, 0x75, 0x73, 0x68, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x12, 0x7a, 0x0a, 0x17, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x54,
	0x54, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x48, 0x74, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x09,
	0x73, 0x65, 0x74, 0x5f, 0x75, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x53, 0x65, 0x74, 0x55, 0x6d, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x74, 0x55, 0x6d, 0x61, 0x73, 0x6b,
	0x12, 0x44, 0x0a, 0x1f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1b, 0x67, 0x72, 0x70, 0x63, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x86, 0x01, 0x0a, 0x19, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x67, 0x72, 0x70, 0x63, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x12,
	0x74, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x11, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x1a, 0x82, 0x01, 0x0a, 0x1c, 0x47, 0x72, 0x70, 0x63, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62,
	0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x47, 0x52, 0x50, 0x43, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x83, 0x01, 0x0a, 0x16, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61,
	0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x80, 0x02, 0x0a, 0x22, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x54, 0x54, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a,
	0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x70,
	0x72, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x70, 0x72, 0x6f, 0x66, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68,
	0x65, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x70,
	0x61, 0x6e, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xa6, 0x01, 0x0a, 0x16, 0x47, 0x52,
	0x50, 0x43, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x12, 0x66, 0x0a, 0x16, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x68,
	0x74, 0x74, 0x70, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x48, 0x74, 0x74, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55,
	0x72, 0x6c, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2f, 0x62, 0x62, 0x2d, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_proto_configuration_global_global_proto_rawDescOnce sync.Once
	file_pkg_proto_configuration_global_global_proto_rawDescData = file_pkg_proto_configuration_global_global_proto_rawDesc
)

func file_pkg_proto_configuration_global_global_proto_rawDescGZIP() []byte {
	file_pkg_proto_configuration_global_global_proto_rawDescOnce.Do(func() {
		file_pkg_proto_configuration_global_global_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_proto_configuration_global_global_proto_rawDescData)
	})
	return file_pkg_proto_configuration_global_global_proto_rawDescData
}

var file_pkg_proto_configuration_global_global_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_pkg_proto_configuration_global_global_proto_goTypes = []interface{}{
	(*PrometheusPushgatewayConfiguration)(nil), // 0: buildbarn.configuration.global.PrometheusPushgatewayConfiguration
	(*TracingConfiguration)(nil),               // 1: buildbarn.configuration.global.TracingConfiguration
	(*SetUmaskConfiguration)(nil),              // 2: buildbarn.configuration.global.SetUmaskConfiguration
	(*SetResourceLimitConfiguration)(nil),      // 3: buildbarn.configuration.global.SetResourceLimitConfiguration
	(*Configuration)(nil),                      // 4: buildbarn.configuration.global.Configuration
	(*DiagnosticsHTTPServerConfiguration)(nil), // 5: buildbarn.configuration.global.DiagnosticsHTTPServerConfiguration
	(*GRPCKubernetesResolver)(nil),             // 6: buildbarn.configuration.global.GRPCKubernetesResolver
	nil,                                        // 7: buildbarn.configuration.global.PrometheusPushgatewayConfiguration.GroupingEntry
	(*PrometheusPushgatewayConfiguration_AdditionalScrapeTarget)(nil), // 8: buildbarn.configuration.global.PrometheusPushgatewayConfiguration.AdditionalScrapeTarget
	(*TracingConfiguration_Backend)(nil),                              // 9: buildbarn.configuration.global.TracingConfiguration.Backend
	(*TracingConfiguration_Sampler)(nil),                              // 10: buildbarn.configuration.global.TracingConfiguration.Sampler
	(*TracingConfiguration_Backend_JaegerCollectorSpanExporter)(nil),  // 11: buildbarn.configuration.global.TracingConfiguration.Backend.JaegerCollectorSpanExporter
	(*TracingConfiguration_Backend_BatchSpanProcessor)(nil),           // 12: buildbarn.configuration.global.TracingConfiguration.Backend.BatchSpanProcessor
	(*TracingConfiguration_Sampler_ParentBased)(nil),                  // 13: buildbarn.configuration.global.TracingConfiguration.Sampler.ParentBased
	(*TracingConfiguration_Sampler_MaximumRate)(nil),                  // 14: buildbarn.configuration.global.TracingConfiguration.Sampler.MaximumRate
	nil,                              // 15: buildbarn.configuration.global.Configuration.GrpcKubernetesResolversEntry
	nil,                              // 16: buildbarn.configuration.global.Configuration.SetResourceLimitsEntry
	(*durationpb.Duration)(nil),      // 17: google.protobuf.Duration
	(*http.ClientConfiguration)(nil), // 18: buildbarn.configuration.http.ClientConfiguration
	(*v1.KeyValue)(nil),              // 19: opentelemetry.proto.common.v1.KeyValue
	(*wrapperspb.UInt64Value)(nil),   // 20: google.protobuf.UInt64Value
	(*http.ServerConfiguration)(nil), // 21: buildbarn.configuration.http.ServerConfiguration
	(*grpc.ClientConfiguration)(nil), // 22: buildbarn.configuration.grpc.ClientConfiguration
	(*emptypb.Empty)(nil),            // 23: google.protobuf.Empty
}
var file_pkg_proto_configuration_global_global_proto_depIdxs = []int32{
	7,  // 0: buildbarn.configuration.global.PrometheusPushgatewayConfiguration.grouping:type_name -> buildbarn.configuration.global.PrometheusPushgatewayConfiguration.GroupingEntry
	17, // 1: buildbarn.configuration.global.PrometheusPushgatewayConfiguration.push_interval:type_name -> google.protobuf.Duration
	18, // 2: buildbarn.configuration.global.PrometheusPushgatewayConfiguration.http_client:type_name -> buildbarn.configuration.http.ClientConfiguration
	17, // 3: buildbarn.configuration.global.PrometheusPushgatewayConfiguration.push_timeout:type_name -> google.protobuf.Duration
	8,  // 4: buildbarn.configuration.global.PrometheusPushgatewayConfiguration.additional_scrape_targets:type_name -> buildbarn.configuration.global.PrometheusPushgatewayConfiguration.AdditionalScrapeTarget
	9,  // 5: buildbarn.configuration.global.TracingConfiguration.backends:type_name -> buildbarn.configuration.global.TracingConfiguration.Backend
	19, // 6: buildbarn.configuration.global.TracingConfiguration.resource_attributes:type_name -> opentelemetry.proto.common.v1.KeyValue
	10, // 7: buildbarn.configuration.global.TracingConfiguration.sampler:type_name -> buildbarn.configuration.global.TracingConfiguration.Sampler
	20, // 8: buildbarn.configuration.global.SetResourceLimitConfiguration.soft_limit:type_name -> google.protobuf.UInt64Value
	20, // 9: buildbarn.configuration.global.SetResourceLimitConfiguration.hard_limit:type_name -> google.protobuf.UInt64Value
	1,  // 10: buildbarn.configuration.global.Configuration.tracing:type_name -> buildbarn.configuration.global.TracingConfiguration
	0,  // 11: buildbarn.configuration.global.Configuration.prometheus_pushgateway:type_name -> buildbarn.configuration.global.PrometheusPushgatewayConfiguration
	5,  // 12: buildbarn.configuration.global.Configuration.diagnostics_http_server:type_name -> buildbarn.configuration.global.DiagnosticsHTTPServerConfiguration
	2,  // 13: buildbarn.configuration.global.Configuration.set_umask:type_name -> buildbarn.configuration.global.SetUmaskConfiguration
	15, // 14: buildbarn.configuration.global.Configuration.grpc_kubernetes_resolvers:type_name -> buildbarn.configuration.global.Configuration.GrpcKubernetesResolversEntry
	16, // 15: buildbarn.configuration.global.Configuration.set_resource_limits:type_name -> buildbarn.configuration.global.Configuration.SetResourceLimitsEntry
	21, // 16: buildbarn.configuration.global.DiagnosticsHTTPServerConfiguration.http_servers:type_name -> buildbarn.configuration.http.ServerConfiguration
	18, // 17: buildbarn.configuration.global.GRPCKubernetesResolver.api_server_http_client:type_name -> buildbarn.configuration.http.ClientConfiguration
	18, // 18: buildbarn.configuration.global.PrometheusPushgatewayConfiguration.AdditionalScrapeTarget.http_client:type_name -> buildbarn.configuration.http.ClientConfiguration
	11, // 19: buildbarn.configuration.global.TracingConfiguration.Backend.jaeger_collector_span_exporter:type_name -> buildbarn.configuration.global.TracingConfiguration.Backend.JaegerCollectorSpanExporter
	22, // 20: buildbarn.configuration.global.TracingConfiguration.Backend.otlp_span_exporter:type_name -> buildbarn.configuration.grpc.ClientConfiguration
	23, // 21: buildbarn.configuration.global.TracingConfiguration.Backend.simple_span_processor:type_name -> google.protobuf.Empty
	12, // 22: buildbarn.configuration.global.TracingConfiguration.Backend.batch_span_processor:type_name -> buildbarn.configuration.global.TracingConfiguration.Backend.BatchSpanProcessor
	23, // 23: buildbarn.configuration.global.TracingConfiguration.Sampler.always:type_name -> google.protobuf.Empty
	23, // 24: buildbarn.configuration.global.TracingConfiguration.Sampler.never:type_name -> google.protobuf.Empty
	13, // 25: buildbarn.configuration.global.TracingConfiguration.Sampler.parent_based:type_name -> buildbarn.configuration.global.TracingConfiguration.Sampler.ParentBased
	14, // 26: buildbarn.configuration.global.TracingConfiguration.Sampler.maximum_rate:type_name -> buildbarn.configuration.global.TracingConfiguration.Sampler.MaximumRate
	18, // 27: buildbarn.configuration.global.TracingConfiguration.Backend.JaegerCollectorSpanExporter.http_client:type_name -> buildbarn.configuration.http.ClientConfiguration
	17, // 28: buildbarn.configuration.global.TracingConfiguration.Backend.BatchSpanProcessor.batch_timeout:type_name -> google.protobuf.Duration
	17, // 29: buildbarn.configuration.global.TracingConfiguration.Backend.BatchSpanProcessor.export_timeout:type_name -> google.protobuf.Duration
	10, // 30: buildbarn.configuration.global.TracingConfiguration.Sampler.ParentBased.no_parent:type_name -> buildbarn.configuration.global.TracingConfiguration.Sampler
	10, // 31: buildbarn.configuration.global.TracingConfiguration.Sampler.ParentBased.local_parent_not_sampled:type_name -> buildbarn.configuration.global.TracingConfiguration.Sampler
	10, // 32: buildbarn.configuration.global.TracingConfiguration.Sampler.ParentBased.local_parent_sampled:type_name -> buildbarn.configuration.global.TracingConfiguration.Sampler
	10, // 33: buildbarn.configuration.global.TracingConfiguration.Sampler.ParentBased.remote_parent_not_sampled:type_name -> buildbarn.configuration.global.TracingConfiguration.Sampler
	10, // 34: buildbarn.configuration.global.TracingConfiguration.Sampler.ParentBased.remote_parent_sampled:type_name -> buildbarn.configuration.global.TracingConfiguration.Sampler
	17, // 35: buildbarn.configuration.global.TracingConfiguration.Sampler.MaximumRate.epoch_duration:type_name -> google.protobuf.Duration
	6,  // 36: buildbarn.configuration.global.Configuration.GrpcKubernetesResolversEntry.value:type_name -> buildbarn.configuration.global.GRPCKubernetesResolver
	3,  // 37: buildbarn.configuration.global.Configuration.SetResourceLimitsEntry.value:type_name -> buildbarn.configuration.global.SetResourceLimitConfiguration
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_pkg_proto_configuration_global_global_proto_init() }
func file_pkg_proto_configuration_global_global_proto_init() {
	if File_pkg_proto_configuration_global_global_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_proto_configuration_global_global_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrometheusPushgatewayConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_configuration_global_global_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracingConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_configuration_global_global_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUmaskConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_configuration_global_global_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetResourceLimitConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_configuration_global_global_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_configuration_global_global_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticsHTTPServerConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_configuration_global_global_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GRPCKubernetesResolver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_configuration_global_global_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrometheusPushgatewayConfiguration_AdditionalScrapeTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_configuration_global_global_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracingConfiguration_Backend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_configuration_global_global_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracingConfiguration_Sampler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_configuration_global_global_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracingConfiguration_Backend_JaegerCollectorSpanExporter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_configuration_global_global_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracingConfiguration_Backend_BatchSpanProcessor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_configuration_global_global_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracingConfiguration_Sampler_ParentBased); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_configuration_global_global_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracingConfiguration_Sampler_MaximumRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_proto_configuration_global_global_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*TracingConfiguration_Backend_JaegerCollectorSpanExporter_)(nil),
		(*TracingConfiguration_Backend_OtlpSpanExporter)(nil),
		(*TracingConfiguration_Backend_SimpleSpanProcessor)(nil),
		(*TracingConfiguration_Backend_BatchSpanProcessor_)(nil),
	}
	file_pkg_proto_configuration_global_global_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*TracingConfiguration_Sampler_Always)(nil),
		(*TracingConfiguration_Sampler_Never)(nil),
		(*TracingConfiguration_Sampler_ParentBased_)(nil),
		(*TracingConfiguration_Sampler_TraceIdRatioBased)(nil),
		(*TracingConfiguration_Sampler_MaximumRate_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_proto_configuration_global_global_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_proto_configuration_global_global_proto_goTypes,
		DependencyIndexes: file_pkg_proto_configuration_global_global_proto_depIdxs,
		MessageInfos:      file_pkg_proto_configuration_global_global_proto_msgTypes,
	}.Build()
	File_pkg_proto_configuration_global_global_proto = out.File
	file_pkg_proto_configuration_global_global_proto_rawDesc = nil
	file_pkg_proto_configuration_global_global_proto_goTypes = nil
	file_pkg_proto_configuration_global_global_proto_depIdxs = nil
}
