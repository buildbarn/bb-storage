syntax = "proto3";

package buildbarn.configuration.jwt;

import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "pkg/proto/configuration/eviction/eviction.proto";

option go_package = "github.com/buildbarn/bb-storage/pkg/proto/configuration/jwt";

message AuthorizationHeaderParserConfiguration {
  // Was 'hmac_key'. Replaced by 'jwks_inline'.
  reserved 1;

  // Was 'public_key'. Replaced by 'jwks_inline'.
  reserved 2;

  // A JSON Web Key Set (JWKS) as described in RFC 7517, chapter 5,
  // containing one or more public keys against which tokens signatures
  // are validated.
  //
  // Public keys encoded in DER or PEM format can be converted to a JSON
  // Web Key Set using one of the following tools:
  //
  // - https://smallstep.com/docs/step-cli/reference/crypto/key/format/
  // - https://irrte.ch/jwt-js-decode/pem2jwk.html
  // - https://russelldavies.github.io/jwk-creator/
  oneof jwks {
    // JWKS stored inline in the configuration.
    google.protobuf.Struct jwks_inline = 7;

    // JWKS stored in a separate file.
    // The file will be automatically reloaded every 300 seconds.
    string jwks_file = 8;
  }

  // Maximum number of validated tokens to cache in memory. This speeds
  // up successive requests made with the same token.
  int32 maximum_cache_size = 3;

  // The cache replacement policy that should be applied to the token
  // cache. It is advised that this is set to LEAST_RECENTLY_USED.
  buildbarn.configuration.eviction.CacheReplacementPolicy
      cache_replacement_policy = 4;

  // This implementation requires that the current time lies between the
  // "nbf" (Not Before) and "exp" (Expiration Time) claims stored in the
  // token, if present.
  //
  // This option allows specifying a boolean JMESPath expression that
  // can be used to place additional requirements on the presence of
  // claims and their values. For example, it is possible to require
  // that the "aud" (Audience) claim is equal to "MyBuildCluster" by
  // using the following JMESPath expression:
  //
  //     aud == 'MyBuildCluster'
  //
  // In case no additional requirements against claims need to be made,
  // it is possible to use the following JMESPath expression (including
  // the backticks):
  //
  //     `true`
  //
  // More details about JMESPath can be found at https://jmespath.org/.
  //
  // It is recommended that this feature is only used for making
  // authentication decisions; not authorization decisions. The reason
  // being that validation failures will cause gRPC requests to fail
  // with code UNAUTHENTICATED; not PERMISSION_DENIED.
  string claims_validation_jmespath_expression = 5;

  // JMESPath expression for converting claims to a Protobuf message of
  // type buildbarn.auth.AuthenticationMetadata. The resulting metadata
  // can be used for purposes such as authorization.
  //
  // The following expression would cause all of the claims in the JSON
  // Web Token's payload to become private authentication metadata:
  //
  //     {"private": @}
  //
  // The following expression demonstrates how given a JSON Web Token
  // consisting of "given_name" and "family_name" fields can be
  // transformed to authentication metadata with a public "name" field.
  //
  //     {"public": {"name": join(' ', [given_name, family_name])}}
  //
  // The following expression can be used if no metadata needs to be
  // extracted from the token:
  //
  //     `{}`
  string metadata_extraction_jmespath_expression = 6;
}
