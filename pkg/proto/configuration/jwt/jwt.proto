syntax = "proto3";

package buildbarn.configuration.jwt;

import "pkg/proto/configuration/eviction/eviction.proto";

option go_package = "github.com/buildbarn/bb-storage/pkg/proto/configuration/jwt";


// (JSON Web Key) [https://tools.ietf.org/html/rfc7517]
message JSONWebKey {
  // "kty" (Key Type) Parameter
  // https://datatracker.ietf.org/doc/html/rfc7517#section-4.1
  string kty = 1;

  // "use" (Public Key Use) Parameter
  // https://datatracker.ietf.org/doc/html/rfc7517#section-4.2
  string use = 2;

  // "alg" (Algorithm) Parameter
  // https://datatracker.ietf.org/doc/html/rfc7517#section-4.4
  string alg = 3;

  // "kid" (Key ID) Parameter
  // https://datatracker.ietf.org/doc/html/rfc7517#section-4.5
  string kid = 4;

  // "crv" (Curve) Parameter
  // https://datatracker.ietf.org/doc/html/rfc7518#section-6.2.1.1
  string crv = 5;

  // "x" (X Coordinate) Parameter
  // https://datatracker.ietf.org/doc/html/rfc7518#section-6.2.1.2
  string x = 6;

  // "y" (X Coordinate) Parameter
  // https://datatracker.ietf.org/doc/html/rfc7518#section-6.2.1.3
  string y = 7;

  // "n" (Modulus) Parameter
  // https://datatracker.ietf.org/doc/html/rfc7518#section-6.3.1.1
  string n = 8;

  // "e" (Exponent) Parameter
  // https://datatracker.ietf.org/doc/html/rfc7518#section-6.3.1.2
  string e = 9;

  // "k" (Key Value) Parameter
  // https://datatracker.ietf.org/doc/html/rfc7518#section-6.4.1
  string k = 10;
}

// (JWK Set) [https://tools.ietf.org/html/rfc7517]
message JSONWebKeySet {
  // The value of the "keys" parameter is an array of JWK values.  By
  // default, the order of the JWK values within the array does not imply
  // an order of preference among them, although applications of JWK Sets
  // can choose to assign a meaning to the order for their purposes, if
  // desired.
  repeated JSONWebKey keys = 1;
}

message AuthorizationHeaderParserConfiguration {
  // Was 'hmac_key'. Replaced by 'jwks'.
  reserved 1;

  // Was 'public_key'. Replaced by 'jwks'.
  reserved 2;
  
  oneof jwks {
    // JSON Web Key Set (JWKS) that contains the public keys that can sign
    // accepted JWTs.
    JSONWebKeySet jwks_inline = 7;

    // Path to a file containing a JSON Web Key Set (JWKS) that contains the the
    // public keys that can sign accepted JWTs.
    string jwks_path = 8;
  }

  // Maximum number of validated tokens to cache in memory. This speeds
  // up successive requests made with the same token.
  int32 maximum_cache_size = 3;

  // The cache replacement policy that should be applied to the token
  // cache. It is advised that this is set to LEAST_RECENTLY_USED.
  buildbarn.configuration.eviction.CacheReplacementPolicy
      cache_replacement_policy = 4;

  // This implementation requires that the current time lies between the
  // "nbf" (Not Before) and "exp" (Expiration Time) claims stored in the
  // token, if present.
  //
  // This option allows specifying a boolean JMESPath expression that
  // can be used to place additional requirements on the presence of
  // claims and their values. For example, it is possible to require
  // that the "aud" (Audience) claim is equal to "MyBuildCluster" by
  // using the following JMESPath expression:
  //
  //     aud == 'MyBuildCluster'
  //
  // In case no additional requirements against claims need to be made,
  // it is possible to use the following JMESPath expression (including
  // the backticks):
  //
  //     `true`
  //
  // More details about JMESPath can be found at https://jmespath.org/.
  //
  // It is recommended that this feature is only used for making
  // authentication decisions; not authorization decisions. The reason
  // being that validation failures will cause gRPC requests to fail
  // with code UNAUTHENTICATED; not PERMISSION_DENIED.
  string claims_validation_jmespath_expression = 5;

  // JMESPath expression for converting claims to a Protobuf message of
  // type buildbarn.auth.AuthenticationMetadata. The resulting metadata
  // can be used for purposes such as authorization.
  //
  // The following expression would cause all of the claims in the JSON
  // Web Token's payload to become private authentication metadata:
  //
  //     {"private": @}
  //
  // The following expression demonstrates how given a JSON Web Token
  // consisting of "given_name" and "family_name" fields can be
  // transformed to authentication metadata with a public "name" field.
  //
  //     {"public": {"name": join(' ', [given_name, family_name])}}
  //
  // The following expression can be used if no metadata needs to be
  // extracted from the token:
  //
  //     `{}`
  string metadata_extraction_jmespath_expression = 6;
}
